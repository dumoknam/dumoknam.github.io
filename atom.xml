<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anything</title>
  
  <subtitle>development, cook</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-31T13:38:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Dumok Nam</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>맥에서 한글 파이썬 모듈 import 하기</title>
    <link href="http://yoursite.com/2017/10/31/korean-python-module-import-in-mac/"/>
    <id>http://yoursite.com/2017/10/31/korean-python-module-import-in-mac/</id>
    <published>2017-10-31T13:25:49.000Z</published>
    <updated>2017-10-31T13:38:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MAC-한글-파이썬-모듈"><a href="#MAC-한글-파이썬-모듈" class="headerlink" title="MAC! 한글! 파이썬 모듈!"></a>MAC! 한글! 파이썬 모듈!</h3><p>unicode의 NFD, NFC 방식이 원인이다!<br><a id="more"></a><br>파이썬 모듈 중에 <code>models.회사</code> 가 있다고 하자.<br><del>한글 모듈을 사용하는 것이 옳은가는 논외로 한다</del><br>윈도우나 우분투에서 <code>from models.회사 import 회사</code> 로 import 하고 사용하는 것은 문제가 되지 않는다.</p><p>하지만 맥에서 위 구문을 그대로 사용하려고 하면, 해당 모듈을 찾을 수 없다는 <code>ModuleNotFoundError</code>가 발생한다.<br>맥의 유니코드는 NFD 방식인데, 여기서 한글을 표현하는 방식이 달라 생기는 문제이다.<br>(맥의 파일을 윈도우 유저에게 공유했더니 한글 파일명이 ㅇㅣㄹㅓㅋㅔ 자모음이 분리되는 현상을 겪은 사람이 있을 것이다. 같은 맥락이다. 윈도우는 NFC 방식을 사용한다. <a href="https://blogs.technet.microsoft.com/spsofficesupportko/2017/01/06/파일명의-한글자모가-분해되어-보여지는-현상-unicode-nfd/" target="_blank" rel="noopener">관련링크</a>)</p><p>한글 모듈 사용을 위해서는 아래처럼 <code>unicodedata.normalize</code> 를 사용하면 된다.<br><script src="//gist.github.com/aed7faccb87b4026c9c7725450f93365.js?file=mac_kr_import.py"></script></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MAC-한글-파이썬-모듈&quot;&gt;&lt;a href=&quot;#MAC-한글-파이썬-모듈&quot; class=&quot;headerlink&quot; title=&quot;MAC! 한글! 파이썬 모듈!&quot;&gt;&lt;/a&gt;MAC! 한글! 파이썬 모듈!&lt;/h3&gt;&lt;p&gt;unicode의 NFD, NFC 방식이 원인이다!&lt;br&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="Django" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/Django/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python 3.x" scheme="http://yoursite.com/tags/Python-3-x/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>what&#39;s new in Django2</title>
    <link href="http://yoursite.com/2017/10/31/what-s-new-in-Django2/"/>
    <id>http://yoursite.com/2017/10/31/what-s-new-in-Django2/</id>
    <published>2017-10-30T16:25:07.000Z</published>
    <updated>2017-11-16T13:19:57.297Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#what-s-new-in-django-2-0" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.0/releases/2.0/#what-s-new-in-django-2-0</a><br>작성중…</p><a id="more"></a><p>Simplified URL routing syntax</p><p><a href="https://docs.djangoproject.com/en/2.0/topics/http/urls/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.0/topics/http/urls/</a></p><p>–</p><p>Mobile-friendly contrib.admin</p><p>–</p><p>Window expressions</p><p><a href="https://docs.djangoproject.com/en/2.0/ref/models/database-functions/#window-functions" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.0/ref/models/database-functions/#window-functions</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/releases/2.0/#what-s-new-in-django-2-0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.djangoproject.com/en/2.0/releases/2.0/#what-s-new-in-django-2-0&lt;/a&gt;&lt;br&gt;작성중…&lt;/p&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="Django" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/Django/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 포스트 소스파일 github 연동 (Edit 버튼 달기)</title>
    <link href="http://yoursite.com/2017/05/07/hexo-git-source-sync/"/>
    <id>http://yoursite.com/2017/05/07/hexo-git-source-sync/</id>
    <published>2017-05-07T12:42:42.000Z</published>
    <updated>2017-05-07T13:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="edit-버튼을-달자"><a href="#edit-버튼을-달자" class="headerlink" title="edit 버튼을 달자"></a>edit 버튼을 달자</h3><p>포스트를 별도의 github repository에 관리하고,<br>포스트 상세페이지에서 edit 버튼을 달아서<br>블로그에서 github의 edit 페이지로 자동 연결하는 방법이다.</p><p>hexo 의 gandalfr 테마를 기준으로 작성하였다. (jade 템플릿)<br><a id="more"></a></p><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><p>포스트 타이틀 옆에 연필 아이콘을 달고,<br>아이콘을 클릭하면 github의 포스트 원본 소스로 이동한다.<br>이후 포스팅을 통해 원본 소스를 수정, commit 하면 hexo가 자동 재배포되는 기능도 추가할 것이다.</p><h2 id="step"><a href="#step" class="headerlink" title="step"></a>step</h2><ol><li>head.jade 파일에 font awesome css 파일 추가</li><li>_config.yml 파일에 github repo 주소 추가</li><li>post 타이틀에 링크 추가</li></ol><p>간단하다. 차례대로 해보자.</p><h3 id="head-jade"><a href="#head-jade" class="headerlink" title="head.jade"></a>head.jade</h3><p>themes/gandalfr/layout/partial/head.jade 파일을 열고, 세 줄의 link 아래에 다음 코드를 추가하자.<br><figure class="highlight plain"><figcaption><span>themes/gandalfr/layout/partial/head.jade</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">link(rel=&quot;stylesheet&quot;, href=url_for(&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;))</div></pre></td></tr></table></figure></p><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>블로그 루트 디렉토리의 _config.yml 파일 맨 아래에 github repository 주소를 추가하자.<br>본인 id와 repository로 변경하자.<br>이 블로그의 설정된 예시는 아래와 같다.</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># github post directory</span></div><div class="line"><span class="string">github_post_edit_path</span> <span class="string">:</span> <span class="attr">https://github.com/dumoknam/hexo_posts/edit/master/</span></div><div class="line"><span class="comment"># github_post_edit_path : https://github.com/본인id/본인repository/edit/master/</span></div></pre></td></tr></table></figure><h3 id="post-jade"><a href="#post-jade" class="headerlink" title="post.jade"></a>post.jade</h3><p>포스트 레이아웃 파일에 링크 아이콘을 달자.<br>themes/gandalfr/layout/mixins/post.jade 파일을 열고, 제일 아래에 45 라인쯤 부터 시작하는 mixin post(item)을 다음 코드로 변경하자</p><figure class="highlight plain"><figcaption><span>themes/gandalfr/layout/mixins/post.jade</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//- Post Page</div><div class="line">mixin post(item)</div><div class="line">    .post</div><div class="line">        article.post-block</div><div class="line">            h1.post-title</div><div class="line">                != item.title + &apos; &apos;</div><div class="line">                - var links = item.path.split(&apos;/&apos;)</div><div class="line">                - var last_value = links[links.length-2]</div><div class="line">                a(href=config.github_post_edit_path+last_value+&apos;.md&apos;)</div><div class="line">                    i.fa.fa-pencil-square</div><div class="line"></div><div class="line">            .tags</div><div class="line">                if item.tags</div><div class="line">                    for tag in item.tags.toArray()</div><div class="line">                        a.tag-title(href=url_for(tag.path))</div><div class="line">                            != &apos;#&apos; + tag.name</div><div class="line">            +postInfo(item)</div><div class="line">            .post-content</div><div class="line">                != item.content</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;edit-버튼을-달자&quot;&gt;&lt;a href=&quot;#edit-버튼을-달자&quot; class=&quot;headerlink&quot; title=&quot;edit 버튼을 달자&quot;&gt;&lt;/a&gt;edit 버튼을 달자&lt;/h3&gt;&lt;p&gt;포스트를 별도의 github repository에 관리하고,&lt;br&gt;포스트 상세페이지에서 edit 버튼을 달아서&lt;br&gt;블로그에서 github의 edit 페이지로 자동 연결하는 방법이다.&lt;/p&gt;
&lt;p&gt;hexo 의 gandalfr 테마를 기준으로 작성하였다. (jade 템플릿)&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="jade" scheme="http://yoursite.com/tags/jade/"/>
    
  </entry>
  
  <entry>
    <title>hi there</title>
    <link href="http://yoursite.com/2017/05/07/hi-there/"/>
    <id>http://yoursite.com/2017/05/07/hi-there/</id>
    <published>2017-05-07T11:26:33.000Z</published>
    <updated>2017-05-07T11:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’m back</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m back&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="hello" scheme="http://yoursite.com/tags/hello/"/>
    
  </entry>
  
  <entry>
    <title>React Native 일기장 앱 개발 (End) - 글쓰기 기능</title>
    <link href="http://yoursite.com/2017/03/20/react-native-diary-part-five/"/>
    <id>http://yoursite.com/2017/03/20/react-native-diary-part-five/</id>
    <published>2017-03-20T14:59:59.000Z</published>
    <updated>2017-05-07T11:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>일기 쓰기 화면과 저장 기능을 만들자</p><a id="more"></a><p><strong>이미지를 클라우드를 쓰다가 직접 올리는 방법으로 바꿨는데 블로그 옮기다가 날려먹었다.. 일기장 포스팅 스크린샷은 없다</strong></p><p><em>한달간 많은 일이 있었다. 조금 정리가 되어 공부 재개!</em></p><hr><h1 id="기존-코드-정리"><a href="#기존-코드-정리" class="headerlink" title="기존 코드 정리"></a>기존 코드 정리</h1><p>글쓰기 창 구현 전에 기존 컴포넌트들을 정리하는 작업부터 진행해보자.</p><h2 id="DiaryListView"><a href="#DiaryListView" class="headerlink" title="DiaryListView"></a>DiaryListView</h2><p>리스트 뷰의 일기목록은 하드코딩으로 항상 1월 데이터만 나오게 되어 있었다.<br>현재 월의 일기가 나오도록 realm 데이터를 읽는 부분을 바꿔보자.<br><code>ListView</code>의 <code>DataSource</code>를 설정하기 위해 호출하는 <code>realm</code>의 <code>getDiaryByYearMonth</code>의 파라미터를 변경하여야 한다. 아래와 같이 현재 날짜의 연도, 월을 전달하도록 하자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> diaryData = diaryRealm.getDiaryByYearMonth(<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear(),<span class="keyword">new</span> <span class="built_in">Date</span>().getMonth());</div></pre></td></tr></table></figure></p><h2 id="DiaryTitleView"><a href="#DiaryTitleView" class="headerlink" title="DiaryTitleView"></a>DiaryTitleView</h2><p><code>ListView</code>의 <code>Title</code>을 표시하는 부분도 변경이 필요하다.<br><code>headerText</code>가 현재 연-월 이 되도록 변경하자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> headerText = [<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear(),<span class="keyword">new</span> <span class="built_in">Date</span>().getMonth()+<span class="number">1</span>].join(<span class="string">' - '</span>);</div></pre></td></tr></table></figure></p><h2 id="TempDiaryContents"><a href="#TempDiaryContents" class="headerlink" title="TempDiaryContents"></a>TempDiaryContents</h2><p>임시 일기 데이터는 더이상 필요 없다. <code>TempDiaryContents.js</code> 파일을 삭제하자.</p><hr><h1 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h1><p>첫 포스트에서 만들었던 글쓰기 <code>+</code> 버튼을 누를때<br>새로운 창이 뜨도록 할 것이다.<br>이런 기능을 구현하기 적당한 것이 <a href="https://facebook.github.io/react-native/docs/modal.html" target="_blank" rel="noopener">Modal View</a>이다.</p><p>구현 방법은 이렇다.<br>Modal 은 화면 표시 여부를 <code>modalVisible</code> 이란 이름의 <code>prop</code>으로 관리한다. 이 값을 글쓰기 <code>+</code>버튼을 누를때 <code>true</code>로 전달하여 나타나게 하고, 글쓰기 취소를 누르면 <code>false</code>로 변경되게 하여 화면에서 사라지게 할 것이다.</p><p>우선 <code>src\components\WriteModalView.js</code> 파일을 생성하자.</p><h2 id="WriteButton"><a href="#WriteButton" class="headerlink" title="WriteButton"></a>WriteButton</h2><p>글쓰기 버튼의 구현 내용은 아래와 같이 변경되었다.<br><script src="//gist.github.com/5dbabe7ad3b30c3bbd431d3bc3321120.js?file=WriteButton.js"></script></p><p><code>WriteButton</code>의 자식으로 <code>WritemodalView</code>를 두었고, 자식의 <code>prop</code>을 <code>WriteButton</code>이 <code>state</code>로 관리하게 된다.</p><ul><li><code>WriteButton</code>의 <code>state</code>인 <code>modalVisible</code>변수 –&gt; <code>WriteModalView</code>의 <code>prop</code>인 <code>modalVisible</code>변수</li><li><code>WriteButton</code>의 <code>state</code>인 <code>hideModal</code>함수 –&gt; <code>WriteModalView</code>의 <code>prop</code>인 <code>hideModal</code>함수</li></ul><p>자식인 <code>WriteModalView</code>에서 <code>modalVisible</code>을 변경할 수 있게 하려고<br><code>hideModal</code>이란 함수를 만들어서 <code>WriteModalView</code>의 <code>prop</code>으로 전달하였다.<br>자식인 <code>WriteModalView</code>에서 <code>hideModal</code>함수를 호출하게 되면<br>부모인 <code>WriteButton</code>의 <code>state</code>인 <code>modalVisible</code>이 변경될 것이고,<br>이것이 다시 자식인 <code>WriteModalView</code>의 <code>prop</code>인 <code>modalVisible</code>을 변경시킬 것이다.<br><em>구조에 대한 이해가 어려울 수 있다</em></p><h2 id="WriteModalView"><a href="#WriteModalView" class="headerlink" title="WriteModalView"></a>WriteModalView</h2><p>글쓰기 Modal View의 구현 내용은 다음과 같다.<br><script src="//gist.github.com/17044097f89338ca814d4b6ff01e24e3.js?file=WriteModalView.js"></script></p><p>각 라인별로 역할을 살펴보자.</p><ol><li>1~3 라인: 사용할 컴포넌트 들을 import 하는 부분이다.</li><li>4 라인: db 연동이 필요하기 때문에 realm도 import 한다.</li><li>6~14라인: 날짜를 다루는데 사용할 함수를 구현해 두었다.</li><li>30~62라인: <code>render()</code>함수 구현 부분이다. 눈여겨 볼 부분은 <code>Modal</code> 컴포넌트를 설정한 33~37라인과 사용자가 입력한 내용을 <code>contextText</code>라는 <code>state</code>로 저장하는 46라인이다. 글쓰기와 글쓰기 취소는 두개 버튼을 두어서 구현하였다. 글쓰기를 누르면 <code>write</code>함수를 호출하고, 안쓰기를 누르면 <code>modalVisible</code>을 변경하여 화면을 사라지게 만들었다.</li><li>17~29라인: 핵심 기능인 글쓰기 <code>write</code> 함수이다. 현재 날짜와, 사용자가 입력한 내용(<code>contentText</code>)을 가져와서, realm에 등록한다.</li></ol><h2 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h2><p>글쓰기 버튼을 누르면 아래 화면이 나온다<br><strong>이미지 없음</strong> <!--![check_01](last_01.png)--></p><p>막 써보자<br><strong>이미지 없음</strong> <!--![check_02](last_02.png)--></p><p>R키를 두번 눌러서 새로고침 하면 등록한 내용이 잘 표시되는 것을 볼 수 있다.<br><strong>이미지 없음</strong> <!--![check_03](last_03.png)--></p><hr><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>여러 일이 겹치면서 아주아주 더디게 진행하던 <code>react native</code> 첫번째 앱은 글쓰기 구현을 마지막으로 중단한다.<br>기능을 추가하자면 끝도 없이 많지만 <code>realm</code>을 연동한 대강의 구조를 구현했다는데에 의의를 둔다.<br><code>react native</code>에 <code>Map</code>, <code>AR</code>, <code>firebase</code> 등등 다른 모듈을 사용한 새 앱을 또 만들어 볼 것이다.</p><p>그럼 오늘은 이만!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;일기 쓰기 화면과 저장 기능을 만들자&lt;/p&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="React Native" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
      <category term="App" scheme="http://yoursite.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>React Native 일기장 앱 개발 (3) - realm DB 연동 클래스</title>
    <link href="http://yoursite.com/2017/02/01/react-native-diary-part-four/"/>
    <id>http://yoursite.com/2017/02/01/react-native-diary-part-four/</id>
    <published>2017-02-01T13:19:20.000Z</published>
    <updated>2017-05-07T11:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>모바일 데이터베이스인 <a href="https://realm.io" target="_blank" rel="noopener">realm</a>을 연동할 클래스를 만들자</p><a id="more"></a><p><strong>이미지를 클라우드를 쓰다가 직접 올리는 방법으로 바꿨는데 블로그 옮기다가 날려먹었다.. 일기장 포스팅 스크린샷은 없다</strong></p><p><em>아이맥 하드가 급 사망하여 윈도우 PC로 대체하였다.. 이번포스팅 부터는 android 기반으로 진행한다.</em></p><h1 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h1><p>일기를 저장하기 위해서는 DB 연동이 필요하다<br><code>sqlite</code>, <code>firebase</code> 등등 다른 DB도 많지만 모바일 환경에 최적화 되었다고 하는 <code>realm(렘)</code>을 사용해보자.</p><h2 id="Realm-설치"><a href="#Realm-설치" class="headerlink" title="Realm 설치"></a>Realm 설치</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save realm</div><div class="line">react-native link realm <span class="comment"># React Native &gt;= 0.31.0</span></div></pre></td></tr></table></figure><p>설치는 다른 node 모듈처럼 <code>npm</code>(혹은 <code>yarn</code>) 명령어로 설치하고,<br>link 명령어가 react-native 프로젝트와 <code>realm</code>을 연결하는 작업을 해준다.<br>(native 코드에 필요한 import, new 등의 작업으로, android는 <code>android\app\src\main\java\com\diary</code> 안의 java 파일에 realm 관련 import 구문이 추가된 것을 볼 수 있다)</p><h3 id="error-fix-windows"><a href="#error-fix-windows" class="headerlink" title="error fix (windows)"></a>error fix (windows)</h3><p>realm 사용시 두가지 주의할 점이 있다.<br><em>포스팅은 0.14버전 기준으로, 이후 버전은 다를 수 있다</em></p><ol><li>cmd, powershell, babun 등 쉘은 반드시 <strong>관리자</strong> 권한으로 실행해야 한다.</li><li><code>node_modules\realm\android\build.gradle</code>의 task send()안의 71 번째 줄 version 뒤에 코드를 지우고 version = ‘1’ 로 변경한다.</li></ol><p>2번은 npm을 path까지 적는 다른 해결법도 있다고 한다. 해보진 않았다.</p><h2 id="DiaryRealm"><a href="#DiaryRealm" class="headerlink" title="DiaryRealm"></a>DiaryRealm</h2><p>realm DB에 데이터를 생성, 수정, 삭제, 조회하는 모든 기능은 <code>DiaryRealm.js</code> 한 파일에 구현할 것이다.<br>src 디렉토리 밑에 db 디렉토리를 생성하고, DiaryRealm.js 파일을 생성하자.</p><p><code>src\db\DiaryRealm.js</code></p><h3 id="Model-Schema"><a href="#Model-Schema" class="headerlink" title="Model Schema"></a>Model Schema</h3><p>첫번째로 일기 DB를 표현할 모델을 만들자.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DiarySchema = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Diary'</span>,</div><div class="line">  <span class="attr">primaryKey</span>: <span class="string">'id'</span>,</div><div class="line">  <span class="attr">properties</span>: &#123;</div><div class="line">    <span class="attr">id</span>: <span class="string">'int'</span>,</div><div class="line">    <span class="attr">year</span>: &#123; <span class="attr">type</span>: <span class="string">'int'</span>, <span class="attr">indexed</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">month</span>: &#123; <span class="attr">type</span>: <span class="string">'int'</span>, <span class="attr">indexed</span>: <span class="literal">true</span> &#125;,</div><div class="line">    <span class="attr">day</span>: <span class="string">'int'</span>,</div><div class="line">    <span class="attr">content</span>: <span class="string">'string'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>모델을 정의하는 schema에 대한 내용은 <a href="https://realm.io/docs/javascript/latest/#models" target="_blank" rel="noopener">문서</a>를 참고하자.<br>name에 테이블명을 정의하고 primaryKey에 pk를 적고, DB의 컬럼에 해당하는 property를 정의한다.</p><p>일기는 id와 숫자 타입의 연, 월, 일, 그리고 string 타입의 일기 내용 문자열을 property로 갖게 하였다.<br>연,월,일을 date 타입으로 하지 않은건, realm 이 아직 date 타입엔 index를 지원하지 않고,<br>검색 조건에 date를 between 형식으로 비교하는 것도 안되는 것 같아서 연-월-일로 나눠 두었다.</p><h3 id="새로-생성할-일기의-ID값-구하기"><a href="#새로-생성할-일기의-ID값-구하기" class="headerlink" title="새로 생성할 일기의 ID값 구하기"></a>새로 생성할 일기의 ID값 구하기</h3><p>PK인 id 값은 고유해야 하므로, 일기를 쓸때마다 매번 달라져야 한다.<br>DB의 시퀀스 처럼 자동으로 증가하는 기능은 없는 것 같아서 id를 구하는 함수를 구현했다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getNextId()&#123;</div><div class="line">  <span class="keyword">var</span> realm = <span class="keyword">this</span>.realm;</div><div class="line">  <span class="keyword">return</span> realm.objects(<span class="string">'Diary'</span>).length+<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>모든 Diary 데이터 개수에 1을 더하는 형태이다.</p><h3 id="Create-일기-데이터-생성"><a href="#Create-일기-데이터-생성" class="headerlink" title="Create, 일기 데이터 생성"></a>Create, 일기 데이터 생성</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">create(data)&#123;</div><div class="line">  <span class="keyword">var</span> realm = <span class="keyword">this</span>.realm;</div><div class="line">  realm.write(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">    realm.create(<span class="string">'Diary'</span>, data);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>데이터 생성은 realm의 create 함수를 호출한다. </p><p>data 파라미터는 위에서 정의한 모델 schema와 동일한, 아래와 같은 형태가 될 것이다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> diary_data = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">year</span>: <span class="number">2017</span>,</div><div class="line">  <span class="attr">month</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">day</span>: <span class="number">15</span>,</div><div class="line">  <span class="attr">content</span>: <span class="string">'첫번째 데이터'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="Update-일기-데이터-수정"><a href="#Update-일기-데이터-수정" class="headerlink" title="Update, 일기 데이터 수정"></a>Update, 일기 데이터 수정</h3><p>수정은 생성과 동일한 <code>create</code> 함수를 사용한다.<br>대신 optional 인자인 세번째 인자 값에 <code>true</code> 를 호출하면 update로 동작한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">update(data)&#123;</div><div class="line">  <span class="keyword">var</span> realm = <span class="keyword">this</span>.realm;</div><div class="line">  realm.write(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">    realm.create(<span class="string">'Diary'</span>, data, <span class="literal">true</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="Filtering-Sorting-일기-데이터-조회"><a href="#Filtering-Sorting-일기-데이터-조회" class="headerlink" title="Filtering, Sorting, 일기 데이터 조회"></a>Filtering, Sorting, 일기 데이터 조회</h3><p>일기 목록은 한번에 한 달의 목록만 조회할 것이다.<br>조회할 연, 월을 인자로 전달받게 하였다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getDiaryByYearMonth(year, month)&#123;</div><div class="line">  <span class="keyword">var</span> realm = <span class="keyword">this</span>.realm;</div><div class="line">  <span class="keyword">return</span> realm.objects(<span class="string">'Diary'</span>).filtered(<span class="string">'year == $0 and month == $1'</span>, year, month).sorted(<span class="string">'day'</span>, <span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>조건을 지정하여 조회하는 메소드가 <code>filtered</code> 이고, 데이터를 정렬하는 메소드가 <code>sorted</code> 이다.<br>전체 Diary 중에 인자로 전달받은 year와 month를 각각 $0, $1에 지정하여 조회하도록 하였다.</p><p>날짜별로 정렬할 것이므로 <code>sorted</code>에 정렬 기준인 <code>day</code>를, <strong>역순</strong>으로 정렬하기 위해 <code>true</code>를 전달한다.<br><code>sorted(&#39;day&#39;)</code> 처럼 정렬 기준만 쓰거나, <code>sorted(&#39;day&#39;, false)</code> 처럼 두번째 인자로 <code>false</code>를 쓰면 날짜 순서대로 정렬이 된다.</p><h3 id="Delete-일기-데이터-삭제"><a href="#Delete-일기-데이터-삭제" class="headerlink" title="Delete, 일기 데이터 삭제"></a>Delete, 일기 데이터 삭제</h3><p>삭제할 <code>id</code>값을 전달받고, <code>delete</code>메소드를 호출하여 해당id값을 갖는 데이터를 삭제한다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span>(diaryId)&#123;</div><div class="line">  <span class="keyword">var</span> realm = <span class="keyword">this</span>.realm;</div><div class="line">  res = realm.delete(realm.objects(<span class="string">'Diary'</span>).filtered(<span class="string">'id == $0'</span>, diaryId));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="DiaryRealm-1"><a href="#DiaryRealm-1" class="headerlink" title="DiaryRealm"></a>DiaryRealm</h2><p>DB의 기본 기능인 CRUD에 대한 구현이 다 되었다.<br>전체 파일 내용은 이렇다.<br><script src="//gist.github.com/d435b7633e3f4268ee1eb179abc1ac7d.js?file=DiaryRealm.js"></script></p><p>잘 연동되나 확인해보자.<br>두 파일만 수정하면 된다.</p><h2 id="DiaryListView-수정"><a href="#DiaryListView-수정" class="headerlink" title="DiaryListView 수정"></a>DiaryListView 수정</h2><p>리스트뷰에서 수정할 부분은 <code>state</code>의 <code>datasource</code>를 지정하는 곳과 <code>renderRow</code> 이다.<br><code>realm</code>에서 제공하는 리스트를 사용하도록 <code>import</code>도 수정하였다.<br><script src="//gist.github.com/e22ea01d28fe83bfd453583d3ea1a5b5.js?file=DiaryListView.js"></script></p><p>임시 일기 데이터인 <code>TempDiaryContents</code> 를 불러오던 코드를 삭제하고,<br><code>realm</code>의 <code>getDiaryByYearMonth</code> 메소드 결과값을 datasource로 설정하도록 변경하였다.<br><em>javascript의 월(month)은 0~11이어서 1월을 0으로 사용하였다</em></p><p>2017년 1월을 하드코딩 해서 사용중인데.. 날짜를 선택하는 기능도 다음에 추가될 것이다.</p><p><code>renderRow</code>에서 바뀐건 타이틀 텍스트 부분이다.<br>위에서 정의한 schema에 <code>title</code> 이라는 property가 없으므로,<br><code>rowData.title</code> 를 <code>rowData.month+1 - rowData.day</code> 로 변경하였다.</p><h2 id="WriteButton-수정"><a href="#WriteButton-수정" class="headerlink" title="WriteButton 수정"></a>WriteButton 수정</h2><script src="//gist.github.com/40fc61aaef6fe8930447e12575b41819.js?file=WriteButton.js"></script><p>WriteButton 터치시 Alert이 나타나던 부분을 삭제하고, 임의로 3개의 데이터를 생성하도록 변경하였다.<br>id값은 매번 <code>getNextId</code>를 호출하여 새로운 값을 받아오도록 하였다.</p><h2 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h2><p><code>react-native run-android</code>로 에뮬레이터에 앱을 실행하고,</p><p><strong>이미지 없음</strong> <!--![before](before.png)--></p><p>글쓰기 버튼 (+)을 누르면, 아무 변화가 없다..<br><em>데이터 추가시 자동갱신은 구현하지 않았다..</em></p><p>키보드의 R 키를 두번 눌러 페이지를 리로드 하면 잘 보인다.<br><strong>이미지 없음</strong> <!--![after](after.png)--></p><p>realm 연동이 되었으니, 다음엔 글쓰기 화면을 만들어 보자.</p><p>오늘은 이만!</p><h4 id="참고-console-log"><a href="#참고-console-log" class="headerlink" title="참고 - console.log"></a>참고 - console.log</h4><p><code>console.log</code> 로 출력하는 값은 바로 볼 수가 없는데,<br><code>react-native log-android</code> 명령을 실행하면 이곳에 나타난다.</p><p>중간중간 값을 찍으면서 진행하고자 한다면, <code>log-android</code>나 <code>log-ios</code>를 사용하자.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;모바일 데이터베이스인 &lt;a href=&quot;https://realm.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;realm&lt;/a&gt;을 연동할 클래스를 만들자&lt;/p&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="React Native" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
      <category term="App" scheme="http://yoursite.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>React Native 일기장 앱 개발 (2) - 리스트 뷰</title>
    <link href="http://yoursite.com/2017/01/14/react-native-diary-part-three/"/>
    <id>http://yoursite.com/2017/01/14/react-native-diary-part-three/</id>
    <published>2017-01-14T07:19:20.000Z</published>
    <updated>2017-05-07T11:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>ListView를 써서 일기 목록을 표시하자.</p><a id="more"></a><p><strong>이미지를 클라우드를 쓰다가 직접 올리는 방법으로 바꿨는데 블로그 옮기다가 날려먹었다.. 일기장 포스팅 스크린샷은 없다</strong></p><h2 id="예제-코드-정리"><a href="#예제-코드-정리" class="headerlink" title="예제 코드 정리"></a>예제 코드 정리</h2><p>자동 생성된 코드를 정리할 시간이다.</p><p><code>index.ios.js</code> 파일에서 불필요한 코드를 지워버리자.</p><figure class="highlight javascript"><figcaption><span>index.ios.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * React Native Diary App</div><div class="line"> * https://dumoknam.github.io</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> WriteButton <span class="keyword">from</span> <span class="string">'./src/components/WriteButton'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Diary</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;WriteButton /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#f8f8f8'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'Diary'</span>, () =&gt; Diary);</div></pre></td></tr></table></figure><p>달랑 버튼만 남겨 두었다.</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>일기 목록 위쪽에 연도를 표시할 컴포넌트 부터 만들어 보자.</p><p>컴포넌트 이름은 <code>DiaryTitleView</code>으로 정했다.</p><p><code>touch src/components/DiaryTitleView.js</code> 명령어로 파일을 생성하고, 아래 내용을 작성하자.</p><figure class="highlight javascript"><figcaption><span>src/components/DiaryTitleView.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  StatusBar</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> headerText = <span class="string">"2017 - 01"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> DiaryTitleView = React.createClass(&#123;</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;StatusBar</div><div class="line">          backgroundColor="#001f3f"</div><div class="line">          barStyle="light-content"</div><div class="line">        /&gt;</div><div class="line">        &lt;View style=&#123;styles.headerContent&#125;&gt;</div><div class="line">          &lt;Text style=&#123;styles.headerText&#125;&gt;&#123;headerText&#125;&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  headerContent: &#123;</div><div class="line">    paddingTop: 30,</div><div class="line">    paddingBottom: 5,</div><div class="line">    alignItems: 'center',</div><div class="line">    justifyContent: 'center',</div><div class="line">    backgroundColor: '#001f3f',</div><div class="line">    borderColor: '#001f3f',</div><div class="line">  &#125;,</div><div class="line">  headerText: &#123;</div><div class="line">    textAlign: 'center',</div><div class="line">    color: '#F8F8F8',</div><div class="line">    fontSize: 20,</div><div class="line">    fontFamily: 'Verdana',</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = DiaryTitleView;</div></pre></td></tr></table></figure><p>이전 포스팅에서도 사용했던 <code>View</code>, <code>Text</code>, <code>StyleSheet</code> 컴포넌트 외에, 처음 <code>import</code> 되는 <code>StatusBar</code>가 보인다.</p><p><a href="https://facebook.github.io/react-native/docs/statusbar.html" target="_blank" rel="noopener"><code>StatusBar</code></a>는 스마트폰 위쪽에 안테나, 시간, 배터리 등이 표시되는 부분을 제어하게 해주는 컴포넌트로,<br>여기서는 <code>StatusBar</code>의 글자색을 흰색으로 하는 <code>barStyle=&quot;light-content&quot;</code>를 사용하기 위해 <code>import</code> 하였다. (<code>backgroundColor</code>는 안드로이드만 적용된다.)</p><p>지금은 <code>headerText에</code> 고정된 값(2017 - 01)을 쓰고 있지만<br>추후엔 현재 날짜가 표시되게 변경할 것이다.</p><p><code>DiaryTitleView.js</code>파일을 저장했으면, <code>index.ios.js</code>에서 불러들이게 하자.</p><p><code>import</code>구문을 추가하고, <code>render</code>함수의 <code>WriteButton</code> 윗줄에 <code>DiaryTitleView</code>를 추가하자.</p><figure class="highlight javascript"><figcaption><span>index.ios.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> DiaryTitleView <span class="keyword">from</span> <span class="string">'./src/components/DiaryTitleView'</span>;</div><div class="line"><span class="comment">// ...이전 코드 생략...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;DiaryTitleView /&gt;</div><div class="line">        &lt;WriteButton /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"><span class="comment">// ...이전 코드 생략...</span></div></pre></td></tr></table></figure><p>그리고 <code>react-native run-ios</code>로 시뮬레이터를 실행하면 2017-01 문자열이 보인다.</p><p><strong>이미지 없음</strong> <!--![title](title.png)--></p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>일기 헤더는 완성되었고, 일기 목록을 나타내야 하는데,<br>문서를 보니 <a href="https://facebook.github.io/react-native/docs/listview.html" target="_blank" rel="noopener">리스트 뷰</a>가 있다. 이걸 써보자.</p><p>문서의 예제를 보면 <code>ListView</code> 컴포넌트를 쓰기 위해</p><ul><li><code>dataSource</code> 에 나타낼 데이터를 넣고,</li><li><code>renderRow</code> 에 그릴 방법을 넣으면 되는 것 같다.</li></ul><p>다른 prop도 많지만 일단 이 두개만 써보기로 한다.</p><h3 id="임시-데이터"><a href="#임시-데이터" class="headerlink" title="임시 데이터"></a>임시 데이터</h3><p>아직 데이터베이스 연동은 구현하지 않았으므로, 임시 일기 데이터 파일을 만들어 두자.</p><p><code>touch src/components/TempDiaryContents.js</code></p><p>파일내용은 이렇다.</p><figure class="highlight javascript"><figcaption><span>src/components/TempDiaryContents.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TempDiaryContents = [</div><div class="line">  &#123;</div><div class="line">    <span class="string">'title'</span>: <span class="string">'01 - 10 (화)'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'오늘은 뭐하지'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">'title'</span>: <span class="string">'01 - 09 (월)'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">'title'</span>: <span class="string">'01 - 08 (일)'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'"Lorem ipsum" text is derived from sections 1.10.33 of Cicero\'s De finibus bonorum et malorum.'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">'title'</span>: <span class="string">'01 - 06 (금)'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">'title'</span>: <span class="string">'01 - 05 (목)'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'5일이다'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">'title'</span>: <span class="string">'01 - 03 (화)'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥\n빈둥빈둥'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="string">'title'</span>: <span class="string">'01 - 01 (일)'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'처음이다 일기를 써보자\n쭉쭉 써보자'</span></div><div class="line">  &#125;,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = TempDiaryContents;</div></pre></td></tr></table></figure><p>이 <code>TempDiaryContents</code>를 <code>ListView</code>의 <code>dataSource</code>로 사용할 것이다.</p><p>내용은 마음대로 써도 되지만 <code>title</code>, <code>content</code> 항목명은 그대로 두자.</p><h3 id="DiaryListView-컴포넌트"><a href="#DiaryListView-컴포넌트" class="headerlink" title="DiaryListView 컴포넌트"></a>DiaryListView 컴포넌트</h3><p>리스트 컴포넌트를 작성하자.</p><p><code>touch src/components/DiaryListView.js</code>로 파일을 만들고,</p><p>아래 내용을 작성하자.</p><figure class="highlight javascript"><figcaption><span>src/components/DiaryListView.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DiaryListView Component - dumok */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text,</div><div class="line">  ListView,</div><div class="line">  View,</div><div class="line">  StyleSheet</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> TempDiaryContents <span class="keyword">from</span> <span class="string">'./TempDiaryContents'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DiaryListView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">var</span> dataSource = <span class="keyword">new</span> ListView.DataSource(</div><div class="line">      &#123;<span class="attr">rowHasChanged</span>: <span class="function">(<span class="params">r1, r2</span>) =&gt;</span> r1 !== r2&#125;);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">dataSource</span>: dataSource.cloneWithRows(TempDiaryContents),</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  renderRow(rowData, sectionID, rowID)&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;View style=&#123;styles.textContainer&#125;&gt;</div><div class="line">          &lt;Text style=&#123;[styles.textBase, styles.title]&#125;&gt;&#123;rowData.title&#125;&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">        &lt;View style=&#123;styles.textContainer&#125;&gt;</div><div class="line">          &lt;Text style=&#123;[styles.textBase, styles.content]&#125;&gt;&#123;rowData.content&#125;&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;ListView</div><div class="line">        dataSource=&#123;this.state.dataSource&#125;</div><div class="line">        renderRow=&#123;this.renderRow&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    margin: 5,</div><div class="line">    padding: 5,</div><div class="line">    shadowColor: '#000000',</div><div class="line">    backgroundColor: '#FFFFFF',</div><div class="line">    shadowOpacity: 0.2,</div><div class="line">    shadowRadius: 0.2,</div><div class="line">    shadowOffset: &#123;</div><div class="line">      height: 1,</div><div class="line">      width: 1,</div><div class="line">    &#125;,</div><div class="line">    borderRadius: 5,</div><div class="line">  &#125;,</div><div class="line">  textContainer: &#123;</div><div class="line">    marginBottom: 5</div><div class="line">  &#125;,</div><div class="line">  textBase: &#123;</div><div class="line">    fontFamily: 'Verdana',</div><div class="line">    marginLeft: 10,</div><div class="line">    marginRight: 10,</div><div class="line">  &#125;,</div><div class="line">  title: &#123;</div><div class="line">    fontSize: 16,</div><div class="line">    fontWeight: 'bold',</div><div class="line">    color: '#555A5F'</div><div class="line">  &#125;,</div><div class="line">  content: &#123;</div><div class="line">    fontSize: 14,</div><div class="line">    lineHeight: 20,</div><div class="line">    color: '#4B4D52'</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>TempDiaryContents</code> 파일을 <code>import</code>하여 <code>dataSource로</code> 지정하였고,</p><p><code>renderRow</code> 함수를 만들어서 일기의 제목과 내용을 각각 <code>View</code> 컴포넌트 안의 <code>Text</code> 컴포넌트에 표시하도록 하였다.<br><code>TempDiaryContents</code>에 <code>title</code>, <code>content</code>로 저장한 내용은<br>각각 <code>rowData.title</code>, <code>rowData.content</code>로 불러오면 된다.</p><p><code>Text</code> 컴포넌트의 <code>style</code>을 지정하는 부분이 이전과 조금 다른데,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;[styles.textBase, styles.title]&#125;&gt;&#123;rowData.title&#125;&lt;<span class="regexp">/Text&gt;</span></div></pre></td></tr></table></figure></p><p>한 컴포넌트에 여러개의 스타일을 지정하고자 할 경우, 위와 같이 배열로 적으면 된다.</p><h3 id="index-ios-js"><a href="#index-ios-js" class="headerlink" title="index.ios.js"></a>index.ios.js</h3><p><code>DiaryListView</code>를 메인 화면에 나타나도록 해보자.<br><code>DiaryTitleView</code>와 방법은 동일하다.<br><code>import</code>에 추가, <code>render</code>에 추가 하면 된다.</p><p><code>index.ios.js</code>파일의 전체 코드는 이렇게 된다.</p><figure class="highlight javascript"><figcaption><span>index.ios.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * React Native Diary App</div><div class="line"> * https://dumoknam.github.io</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> WriteButton <span class="keyword">from</span> <span class="string">'./src/components/WriteButton'</span>;</div><div class="line"><span class="keyword">import</span> DiaryTitleView <span class="keyword">from</span> <span class="string">'./src/components/DiaryTitleView'</span>;</div><div class="line"><span class="keyword">import</span> DiaryListView <span class="keyword">from</span> <span class="string">'./src/components/DiaryListView'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Diary</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;DiaryTitleView /&gt;</div><div class="line">        &lt;DiaryListView /&gt;</div><div class="line">        &lt;WriteButton /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#f8f8f8'</span>,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'Diary'</span>, () =&gt; Diary);</div></pre></td></tr></table></figure><p>파일을 저장하고 시뮬레이터에 Cmd+R로 리로드하면, 일기 목록이 나온다.</p><p><strong>이미지 없음</strong> <!--![diary_list](list_fin.png)--></p><p>물론 스크롤도 잘 된다.</p><p><strong>이미지 없음</strong> <!--![diary_list_scroll](list_scroll.png)--></p><p>일기장 목록의 레이아웃은 만들어 졌으니, 다음엔 데이터베이스 연동을 해야겠다.</p><p>오늘은 이만!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ListView를 써서 일기 목록을 표시하자.&lt;/p&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="React Native" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
      <category term="App" scheme="http://yoursite.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>React Native 일기장 앱 개발 (1) - 글쓰기 버튼</title>
    <link href="http://yoursite.com/2017/01/05/react-native-diary-part-two/"/>
    <id>http://yoursite.com/2017/01/05/react-native-diary-part-two/</id>
    <published>2017-01-05T13:58:50.000Z</published>
    <updated>2017-05-07T11:42:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>일기장 앱을 어떻게 만들지 그려보고, 글쓰기 버튼을 달아보자.</p><a id="more"></a><p><strong>이미지를 클라우드를 쓰다가 직접 올리는 방법으로 바꿨는데 블로그 옮기다가 날려먹었다.. 일기장 포스팅 스크린샷은 없다</strong></p><h2 id="목업"><a href="#목업" class="headerlink" title="목업"></a>목업</h2><p>일기장 앱의 일기 리스트의 목업은 이렇다</p><p><strong>이미지 없음</strong> <!--![diary_mockup](Diary.png)--></p><p>제일 위에 연도와 월(2017-01)이 타이틀로 있고, 일기 내용이 리스트로 쭉 이어지는 형태이다.<br>오른쪽 하단에는 <strong>글쓰기 버튼 +</strong>이 있다.<br>일단 이 글쓰기 버튼부터 달아보자.</p><h2 id="글쓰기-버튼-달기"><a href="#글쓰기-버튼-달기" class="headerlink" title="글쓰기 버튼 달기"></a>글쓰기 버튼 달기</h2><h3 id="Diary-프로젝트-생성"><a href="#Diary-프로젝트-생성" class="headerlink" title="Diary 프로젝트 생성"></a>Diary 프로젝트 생성</h3><p><code>react-native init Diary</code> 명령어로 프로젝트를 생성하자.<br><strong>이미지 없음</strong> <!--![diary_init](0104_01_init.png)--></p><p>이번 포스팅은 자동 생성된 코드에 버튼만 추가하겠다.</p><blockquote><p><a href="http://nativebase.io" target="_blank" rel="noopener">NativeBase</a>나 <a href="https://github.com/mastermoo/react-native-action-button" target="_blank" rel="noopener">react-native-action-button</a>같은 컴포넌트를 활용해도 좋다.</p></blockquote><p>완성된 버튼은 이런 모양이다.<br><strong>이미지 없음</strong> <!--![write_button_fin](0105_01_write_button_fin.png)--></p><p>네이비색 동그란 버튼에 그림자 효과가있고 흰 글씨로 + 가 써있다.<br>누르면 글쓰는 팝업이 떠야 하는데 그 기능은 다른 포스팅에서…</p><h3 id="WriteButton-컴포넌트-파일-생성"><a href="#WriteButton-컴포넌트-파일-생성" class="headerlink" title="WriteButton 컴포넌트 파일 생성"></a>WriteButton 컴포넌트 파일 생성</h3><p>앞으로 생성할 컴포넌트 파일들은 src/components 디렉토리에 두겠다.<br>우선 디렉토리를 만들고<br><code>mkdir -p src/components</code></p><p>글쓰기 버튼 컴포넌트를 작성할 파일을 생성하자.<br><code>touch src/components/WriteButton.js</code></p><p>이런 구조가 된다<br><strong>이미지 없음</strong> <!--![touch_file](0105_02_touch_file.png)--></p><p>에디터로 파일을 열어서 주석에 이름부터 써두자</p><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* WriteButton Component - dumok */</span></div></pre></td></tr></table></figure><p>버튼 Class 를 만들자.<br>React Native <a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="noopener">문서</a>의 Components를 보면 <a href="https://facebook.github.io/react-native/docs/button.html" target="_blank" rel="noopener">Button</a> 컴포넌트가 있지만, 커스터마이징이 적게 되니 마음에 안들면 <a href="https://facebook.github.io/react-native/docs/touchableopacity.html" target="_blank" rel="noopener">TouchableOpacity</a>를 사용하라고 되어 있다. TouchableOpacity를 써보자. (<a href="https://facebook.github.io/react-native/docs/touchablehighlight.html" target="_blank" rel="noopener">TouchableHighlight</a> 컴포넌트를 사용해도 된다.)</p><p>WriteButton.js 파일에 TouchableOpacity를 불러오도록 하자.</p><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* WriteButton Component - dumok */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  TouchableOpacity</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div></pre></td></tr></table></figure><p>그리고 WriteButton 컴포넌트 클래스를 만들자.</p><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* WriteButton Component - dumok */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  TouchableOpacity</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TouchableOpacity&gt;</div><div class="line">      &lt;/TouchableOpacity&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>버튼의 + 는 이미지가 아니라 텍스트로 표현할 것이다.<br>Text 컴포넌트를 import, render에 추가하자.<br><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* WriteButton Component - dumok */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text,</div><div class="line">  TouchableOpacity</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TouchableOpacity&gt;</div><div class="line">      &lt;Text&gt;+&lt;/Text&gt;</div><div class="line">      &lt;/TouchableOpacity&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h3 id="메인에서-WriteButton-컴포넌트-불러오기"><a href="#메인에서-WriteButton-컴포넌트-불러오기" class="headerlink" title="메인에서 WriteButton 컴포넌트 불러오기"></a>메인에서 WriteButton 컴포넌트 불러오기</h3><p>WriteButton 컴포넌트를 그려보자.</p><p><code>index.ios.js</code> 파일을 열어서<br>14라인 <code>import WriteButton from &#39;.src/components/WriteButton&#39;;</code> 과<br>30라인 <code>&lt;WriteButton /&gt;</code> 두 줄을 추가하자.<br><figure class="highlight javascript"><figcaption><span>index.ios.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> WriteButton <span class="keyword">from</span> <span class="string">'./src/components/WriteButton'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Diary</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">          Welcome to React Native!</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          To get started, edit index.ios.js</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          Press Cmd+R to reload,&#123;'\n'&#125;</div><div class="line">          Cmd+D or shake for dev menu</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;WriteButton /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">welcome</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">instructions</span>: &#123;</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#333333'</span>,</div><div class="line">    <span class="attr">marginBottom</span>: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'Diary'</span>, () =&gt; Diary);</div></pre></td></tr></table></figure></p><p>이제 <code>react-native run-ios</code>로 시뮬레이터를 실행해보면,<br>+가 보인다!</p><blockquote><p>파일을 수정하고 매번 run-ios를 할 필요는 없다. 시뮬레이터는 처음 한번만 실행하고, 파일을 수정한 뒤 시뮬레이터에서 Cmd + R 키를 눌러 새로고침 하면 바꾼 내용을 확인할 수 있다.</p></blockquote><p><strong>이미지 없음</strong> <!--![write_button_01](0105_03_write_button_01.png)--></p><p>이제 이 버튼을 꾸며보자.</p><h3 id="StyleSheet-생성하기"><a href="#StyleSheet-생성하기" class="headerlink" title="StyleSheet 생성하기"></a>StyleSheet 생성하기</h3><p><code>index.ios.js</code> 파일에서도 볼 수 있듯이,<br>스타일을 지정할 때에는 StyleSheet라는 컴포넌트를 사용하면 된다.(웹의 css와 동일한 역할이다)</p><p>우선 StyleSheet 컴포넌트를 import 한다.<br><code>TouchableOpacity</code>,<code>Text</code>를 import한 구문 아래에 <code>StyleSheet</code>를 추가하자.</p><p>StyleSheet에는 두 종류의 스타일 정의가 필요하다.</p><ol><li>버튼의 + 글자 스타일 (writeButtonText)</li><li>버튼 스타일(writeButton)</li></ol><h4 id="writeButtonText-Style"><a href="#writeButtonText-Style" class="headerlink" title="writeButtonText Style"></a>writeButtonText Style</h4><p>버튼의 + 텍스트는 흰 색깔과 폰트 크기만 지정하면 된다.</p><ul><li>fontSize: 25</li><li>color: ‘white’</li></ul><h4 id="writeButton-Style"><a href="#writeButton-Style" class="headerlink" title="writeButton Style"></a>writeButton Style</h4><p>버튼에 적용될 스타일은 조금 많은데 종류별로 살펴보면,</p><p>버튼은 일단 남색이어야 하고,</p><ul><li>backgroundColor: ‘#001f3f’</li><li>borderColor: ‘#001f3f’</li></ul><p>적당한 크기에 원 형태(borderRadius가 50%)를 가져야 하며,</p><ul><li>height: 50</li><li>width: 50</li><li>borderRadius: 25</li></ul><p>버튼의 위치는 다른 컴포넌트에 독립적인 절대경로로, 화면 오른쪽 하단에 위치한다.</p><ul><li>position: ‘absolute’</li><li>bottom: 25</li><li>right: 25</li></ul><p>버튼의 텍스트는 가운데 정렬</p><ul><li>alignItems: ‘center’</li><li>justifyContent: ‘center’</li></ul><p>마지막으로 <strong>아래 방향 그림자 효과</strong>를 주어서 버튼이 떠있는 것처럼 보이게 한다</p><ul><li>shadowColor: ‘#000000’</li><li>shadowOpacity: 0.8</li><li>shadowRadius: 2</li><li>shadowOffset: {  height: 1,  width: 0, }</li></ul><p>추가된 스타일 코드를 다 합치면 아래와 같다.<br><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...기존코드 생략...</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text,</div><div class="line">  TouchableOpacity,</div><div class="line">  StyleSheet</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">// ...기존코드 생략...</span></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">writeButton</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#001f3f'</span>,</div><div class="line">    <span class="attr">borderColor</span>: <span class="string">'#001f3f'</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">width</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">borderRadius</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">    <span class="attr">bottom</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">right</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">shadowColor</span>: <span class="string">'#000000'</span>,</div><div class="line">    <span class="attr">shadowOpacity</span>: <span class="number">0.8</span>,</div><div class="line">    <span class="attr">shadowRadius</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">shadowOffset</span>: &#123;</div><div class="line">      <span class="attr">height</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">width</span>: <span class="number">0</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">writeButtonText</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'white'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="StyleSheet-적용하기"><a href="#StyleSheet-적용하기" class="headerlink" title="StyleSheet 적용하기"></a>StyleSheet 적용하기</h3><p>생성한 styles를 적용하려면 컴포넌트마다 style prop에 적용할 스타일을 지정해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity&gt;</div><div class="line">&lt;Text&gt;</div></pre></td></tr></table></figure><p>에 각각<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity style=&#123;styles.writeButton&#125;&gt;</div><div class="line">&lt;Text style=&#123;styles.writeButtonText&#125;&gt;</div></pre></td></tr></table></figure></p><p>style prop을 지정하면 된다.</p><p>여기까지 작성된 코드는 이렇다.<br><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* WriteButton Component - dumok */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text,</div><div class="line">  TouchableOpacity,</div><div class="line">  StyleSheet</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TouchableOpacity style=&#123;styles.writeButton&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.writeButtonText&#125;&gt;+&lt;/Text&gt;</div><div class="line">      &lt;/TouchableOpacity&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">writeButton</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#001f3f'</span>,</div><div class="line">    <span class="attr">borderColor</span>: <span class="string">'#001f3f'</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">width</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">borderRadius</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">    <span class="attr">bottom</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">right</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">shadowColor</span>: <span class="string">'#000000'</span>,</div><div class="line">    <span class="attr">shadowOpacity</span>: <span class="number">0.8</span>,</div><div class="line">    <span class="attr">shadowRadius</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">shadowOffset</span>: &#123;</div><div class="line">      <span class="attr">height</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">width</span>: <span class="number">0</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">writeButtonText</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'white'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>이제 시뮬레이터에서 <code>Cmd+R</code>로 화면을 리로드하면, 버튼이 나타나는 것을 확인할 수 있다.</p><h3 id="글쓰기-버튼에-Alert-적용"><a href="#글쓰기-버튼에-Alert-적용" class="headerlink" title="글쓰기 버튼에 Alert 적용"></a>글쓰기 버튼에 Alert 적용</h3><p>버튼은 완성되었고, 누르면 눌러지는 효과가 보이긴 하지만 아무 반응이 없으니 조금 심심하다.<br>버튼을 눌렀을때 경고창이라도 뜨게 해보자.</p><p>다시 <a href="https://facebook.github.io/react-native/docs/touchableopacity.html" target="_blank" rel="noopener">문서</a>를 보면, 버튼이 눌러질때 작동할 함수는 onPress prop으로 지정하는 것을 알 수 있다.<br>우리도 onPressButton 함수를 만들어 보자.</p><p>경고창 컴포넌트를 쓰기 위해 WriteButton.js 파일의 import에 Alert을 추가하고,<br>파일 맨 아래에 onPressButton 함수를 만들자.<br><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ... 기존 코드 생략 ...</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text,</div><div class="line">  TouchableOpacity,</div><div class="line">  StyleSheet,</div><div class="line">  Alert</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">// ... 기존 코드 생략 ...</span></div><div class="line"><span class="keyword">const</span> onPressButton = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  Alert.alert(<span class="string">'버튼 눌렀네!?'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>그리고 TouchableOpacity에 onPress prop을 지정해서 버튼을 눌렀을때 onPressButton 함수를 호출하도록 연결시키자.<br><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ... 기존 코드 생략 ...</span></div><div class="line">      &lt;TouchableOpacity style=&#123;styles.writeButton&#125; onPress=&#123;onPressButton&#125;&gt;</div><div class="line"><span class="comment">// ... 기존 코드 생략 ...</span></div></pre></td></tr></table></figure></p><p>완성된 코드는 다음과 같다.<br><figure class="highlight javascript"><figcaption><span>src/components/WriteButton.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* WriteButton Component - dumok */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Text,</div><div class="line">  TouchableOpacity,</div><div class="line">  StyleSheet,</div><div class="line">  Alert</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TouchableOpacity style=&#123;styles.writeButton&#125; onPress=&#123;onPressButton&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.writeButtonText&#125;&gt;+&lt;/Text&gt;</div><div class="line">      &lt;/TouchableOpacity&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">writeButton</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#001f3f'</span>,</div><div class="line">    <span class="attr">borderColor</span>: <span class="string">'#001f3f'</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">width</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">borderRadius</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">    <span class="attr">bottom</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">right</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">shadowColor</span>: <span class="string">'#000000'</span>,</div><div class="line">    <span class="attr">shadowOpacity</span>: <span class="number">0.8</span>,</div><div class="line">    <span class="attr">shadowRadius</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">shadowOffset</span>: &#123;</div><div class="line">      <span class="attr">height</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">width</span>: <span class="number">0</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">writeButtonText</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'white'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> onPressButton = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  Alert.alert(<span class="string">'버튼 눌렀네!?'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="글쓰기-버튼-Alert-확인-android"><a href="#글쓰기-버튼-Alert-확인-android" class="headerlink" title="글쓰기 버튼 Alert 확인 (+ android)"></a>글쓰기 버튼 Alert 확인 (+ android)</h3><p>아이폰 시뮬레이터에서 <code>Cmd + R</code>로 화면을 리로드하고, + 버튼을 눌러보자. 눌렀네!? 가 뜬다.</p><p>안드로이드 시뮬레이터에서도 해보자.<br><code>index.android.js</code>파일을 열어서 내용을 다 지우고,<br><code>index.ios.js</code>파일 내용을 모두 복사하여 <code>index.android.js</code>로 붙여넣기 한다.<br>genymotion android 에뮬레이터를 실행하고,<br><code>react-native run-android</code> 명령어로 앱을 실행하자.</p><p>아이폰과 동일한(?) 화면이 나오고,<br><strong>이미지 없음</strong> <!--![android_run](0105_04_android_run.png)--><br>버튼도 잘 동작한다.<br><strong>이미지 없음</strong> <!--![android_button_press](0105_05_android_button_pressed.png)--></p><p>사실 아이폰과 안드로이드에는 조금 차이가 있다. 안드로이드는 버튼의 그림자 효과가 없는데, <a href="http://facebook.github.io/react-native/releases/0.40/docs/shadow-props.html" target="_blank" rel="noopener">react native 문서</a>를 보면 shadow prop에 ios 라벨만 붙어있다.<br>android는 지원하지 않는다는 것인데.. 그래도 누군가는 만들어 두었을테니 구글에서 찾아보는것도 좋겠다.</p><p>오늘은 여기까지!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;일기장 앱을 어떻게 만들지 그려보고, 글쓰기 버튼을 달아보자.&lt;/p&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="React Native" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
      <category term="App" scheme="http://yoursite.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>React Native 일기장 앱 개발 (0) - Hello World</title>
    <link href="http://yoursite.com/2017/01/01/react-native-diary-part-one/"/>
    <id>http://yoursite.com/2017/01/01/react-native-diary-part-one/</id>
    <published>2017-01-01T14:27:51.000Z</published>
    <updated>2017-05-07T11:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017년을 맞아 새로운걸 공부해보자!</p><p>하여 정한 주제는 React Native.</p><h2 id="일기장"><a href="#일기장" class="headerlink" title="일기장"></a>일기장</h2><p>일기장 앱을 만드는 튜토리얼을 포스팅 할 것이다.</p><p>튜토리얼 이라기 보다는.. 공부하고 만들어 본 과정에 대한 정리가 맞겠다.</p><p>여튼 튜토리얼에 자주 나오는 예제가 TODO 만들기 인데, 이를 조금 변형하고자 한다.</p><a id="more"></a><h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a></h3><p>자바스크립트와 React로 모바일 앱을 만드는 기술이라고 한다.</p><h3 id="React"><a href="#React" class="headerlink" title="React"></a><a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React</a></h3><p>화면 개발에 사용되는 자바스크립트 라이브러리이다.</p><p>React Native의 기반이 되는 React에 대한 포스팅은 <a href="https://velopert.com/reactjs-tutorials" target="_blank" rel="noopener">이 블로그</a>를 추천한다.</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>환경설정을 하고, 시작은 언제나 그렇듯 Hello World를 찍어보자</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><p>우선 <a href="https://nodejs.org" target="_blank" rel="noopener">노드</a>가 필요하다. <a href="https://nodejs.org" target="_blank" rel="noopener">공식사이트</a>에서 다운로드, 설치하자.</p><p>설치 후 <code>node -v</code> 커맨드를 입력하면,<br><img src="https://lh3.googleusercontent.com/1ksUkevVsXBUY9pumMT46Kqc1YAsU60_MSbw7tw-uxNPegkrRFdlGb2HeglmbiHzZBbtXKRsMbXzrA=w2560-h1440-no" alt="node_version"><br>현재 버전 6.9.2 이 확인된다.</p><p>다음은 React Native CLI 설치이다. 노드 설치 후에 <code>npm install -g react-native-cli</code> 커맨드로 설치하자<br><img src="https://lh3.googleusercontent.com/is7ijoGDhoWX7Q8GKRRwZ3sl06VuIexWYLguNnB5NioMJO2KYRQtgkQkw3NzFN1IPM3bYeFBNYmKfg=w2560-h1440-no" alt="react-native-cli_version"></p><p>다음은 <code>react-native init HelloWorld</code> 커맨드를 입력한다 - 앱의 기본 틀을 생성해준다.<br><img src="https://lh3.googleusercontent.com/RiCLKIP60pwNE3prNqTijCqe-ZK2_6DaNFFO6wevmgrJSh7ZXoJzvt6nomSQtV7MdO-16YOs8OZRcA=w2560-h1440-no" alt="react-native_init"><br>시간이 조금 걸린다..</p><p>프로젝트가 생성되면 앱을 실행하는 명령어를 친절히 알려준다.</p><p><img src="https://lh3.googleusercontent.com/QqVY_BZChtFSQuK_dSj9SwWQDBeg982PGeUyW5G6EQayNtEa9RJusEqlbx5v-uVJ9gOG56ig8Flh9A=w2560-h1440-no" alt="react-native_to_run"></p><p>iOS 실행하기: <code>react-native run-ios</code> <em>(맥에서만 가능하다!)</em></p><p>Android 실행하기: <code>react-native run-android</code> <em>(에뮬레이터 설정이 되어있어야 한다!)</em></p><p>안드로이드는 에뮬레이터 설정이 필요하고, 맥 사용자라면 위 iOS 실행 명령어를 통해 바로 아이폰 앱을 실행할 수 있다.</p><p>안드로이드 에뮬레이터 설정은 <a href="http://kwon-9981.tistory.com/15" target="_blank" rel="noopener">이 포스팅</a>을 참고하자.</p><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>생성된 코드를 간단히 살펴보고 Hello World가 나오도록 코드를 조금 수정해보자</p><p>에디터로 HelloWorld 디렉토리의 index.ios.js 파일을 열어보자 (포스팅에선 <a href="https://atom.io" target="_blank" rel="noopener">Atom</a>을 사용한다)</p><p><em>안드로이드는 index.android.js 파일을 수정하면 된다.</em></p><figure class="highlight javascript"><figcaption><span>index.ios.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">          Welcome to React Native!</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          To get started, edit index.ios.js</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          Press Cmd+R to reload,&#123;'\n'&#125;</div><div class="line">          Cmd+D or shake for dev menu</div><div class="line">        &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">welcome</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">instructions</span>: &#123;</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#333333'</span>,</div><div class="line">    <span class="attr">marginBottom</span>: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'HelloWorld'</span>, () =&gt; HelloWorld);</div></pre></td></tr></table></figure><p>위 코드는 크게 4 부분으로 구성되어 있다.</p><ol><li>import: react와 react-native의 컴포넌트들을 불러온다.</li><li>HelloWorld class: 핵심은 render 함수. 화면에 무엇을 어떻게 그릴지 정의한다. react-native 컴포넌트인 View 안에 또 다른 컴포넌트 Text 를 사용하고 있다.</li><li>StyleSheet: 화면에 나타날 모양을 정의한다. css다. <strong>이번 포스팅에선 StyleSheet를 생성하지 않고 바로 스타일을 적용할 것이다.</strong></li><li>AppRegistry: Helloworld 컴포넌트를 실행하도록 등록하는 작업이다.</li></ol><p>미리 써있는 문구 대신 Hello World를 쓰기 위해 우리가 수정해야 할 곳은 2번과 3번이다. 지워버리자.</p><figure class="highlight javascript"><figcaption><span>index.ios.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Hello World</div><div class="line"> * dumok</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'HelloWorld'</span>, () =&gt; HelloWorld);</div></pre></td></tr></table></figure><p>위 코드에서 시작한다. <del>주석만 조금 수정했다</del></p><ul><li>우선 Hello World 라는 텍스트를 입력해야 한다. <code>&lt;Text&gt;Hello World!&lt;/Text&gt;</code></li><li>이 텍스트가 들어갈 HelloWorld라는 class를 생성해야 하고, <code>class HelloWorld</code></li><li>class는 react의 Component를 상속해야 한다. <code>extends Component</code></li><li>Component는 화면에 그리는 render 함수를 구현해야 한다. <code>render() { return (...); }</code></li></ul><p>여기까지 합치면 다음과 같다.</p><figure class="highlight javascript"><figcaption><span>index.ios.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Hello World</div><div class="line"> * dumok</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Text&gt;Hello World!&lt;/Text&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'HelloWorld'</span>, () =&gt; HelloWorld);</div></pre></td></tr></table></figure><p>여기까지 저장하고 실행해보자<br><code>react-native run-ios</code> <em>(안드로이드는 <code>react-native run-android</code>)</em></p><p>한참을 기다리면…</p><p>아이폰 시뮬레이터에 Hello World!가!</p><p><img src="https://lh3.googleusercontent.com/F4T7XwEzH4skhwytEwey-HUnKVhQshAnJAirqmKabOA5Xb_7ClRN-l2zCLhPIB1Qy3zCEGlwqOdGdg=w2560-h1440-no" alt="hello_world_wt"><br>그런데 이놈이 한참 위에 딱붙어 있다.. 가린다…</p><p>글자에 margin을 줘서 떨어지게 해보자.</p><p><code>&lt;Text&gt;Hello World!&lt;/Text&gt;</code> 를<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;&#123; <span class="attr">margin</span>:<span class="number">20</span> &#125;&#125;&gt;Hello World!&lt;/Text&gt;</div></pre></td></tr></table></figure></p><p>로 바꿔서 저장하자.</p><p>글자 크기도 좀 바꾸고 싶다면<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Text style=&#123;&#123;<span class="attr">margin</span>:<span class="number">20</span>, <span class="attr">fontSize</span>:<span class="number">15</span>&#125;&#125;&gt;Hello World!&lt;/Text&gt;</div></pre></td></tr></table></figure></p><p>처럼 작성하면 된다.</p><p><strong>CSS에서는 하이픈(-)을 사용하지만, react의 컴포넌트에서 쓸 때는 font-size 대신 fontSize 처럼 CamelCase로 적어야 한다.</strong></p><p>다시 실행하면 <code>react-native run-ios</code></p><p><img src="https://lh3.googleusercontent.com/qMY87S99yPMWnFpK4QGAv5vFZePVvqkKk_uPJrwXFmVowcVxXWPWowOwrZnaIrAFPczt6UuphwGIUA=w2560-h1440-no" alt="hello_world_fin"></p><p>글자가 좀 떨어져 나오는 것을 볼 수 있다.</p><p>react-native 컴포넌트, 레이아웃, 스타일 등에 대해서는 앱을 만들면서 하나씩 알아보도록 하자.</p><p>오늘은 이만!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017년을 맞아 새로운걸 공부해보자!&lt;/p&gt;
&lt;p&gt;하여 정한 주제는 React Native.&lt;/p&gt;
&lt;h2 id=&quot;일기장&quot;&gt;&lt;a href=&quot;#일기장&quot; class=&quot;headerlink&quot; title=&quot;일기장&quot;&gt;&lt;/a&gt;일기장&lt;/h2&gt;&lt;p&gt;일기장 앱을 만드는 튜토리얼을 포스팅 할 것이다.&lt;/p&gt;
&lt;p&gt;튜토리얼 이라기 보다는.. 공부하고 만들어 본 과정에 대한 정리가 맞겠다.&lt;/p&gt;
&lt;p&gt;여튼 튜토리얼에 자주 나오는 예제가 TODO 만들기 인데, 이를 조금 변형하고자 한다.&lt;/p&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="React Native" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
      <category term="App" scheme="http://yoursite.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 검색 달기</title>
    <link href="http://yoursite.com/2016/10/25/local-search/"/>
    <id>http://yoursite.com/2016/10/25/local-search/</id>
    <published>2016-10-25T14:31:47.000Z</published>
    <updated>2017-05-07T11:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="검색을-달자"><a href="#검색을-달자" class="headerlink" title="검색을 달자"></a>검색을 달자</h3><p>hexo 로 블로그를 새로 만들고,<br>이 사이트의 search 메뉴에 적용되어 있는 검색 기능을 설정하는 방법이다.<br><a id="more"></a></p><p>algolia나 Swiftype 같은 써드파티 검색 서비스를 사용하지 않고,<br>내부 search.xml 파일을 검색하는 방식이다.<br><a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 모듈을 사용하고, <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">tranquilpeak</a> 테마를 기준으로 작성하였다.</p><p><a href="http://jeffworkshop.com/2016/01/01/hexo-Local-Search/" target="_blank" rel="noopener">이 포스트</a> 내용에 설명을 덧붙인 글이다.</p><h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><h4 id="사이트-생성-amp-tranquilpeak-테마-적용"><a href="#사이트-생성-amp-tranquilpeak-테마-적용" class="headerlink" title="사이트 생성 &amp; tranquilpeak 테마 적용"></a>사이트 생성 &amp; tranquilpeak 테마 적용</h4><p>hexo 블로그 폴더(blog) 생성하고, 검색 모듈을 설치한다<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure></p><p><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/releases/download/v1.9.1/hexo-theme-tranquilpeak-built-for-production-1.9.1.zip" target="_blank" rel="noopener">테마 파일</a>을 다운받아서 압축 해제하고,<br>폴더 이름을 hexo-theme-tranquilpeak-built-for-production-1.9.1 에서 tranquilpeak로 변경한다.<br>링크에 파일 다운이 안되면 <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">github</a> 에서 받자. 일반 사용자(users)용으로 받아야 한다.<br>폴더 구조가 <em>blog/themes/tranquilpeak</em> 가 되도록 tranquilpeak 폴더를 blog/themes/로 이동시킨다. </p><p>hexo 테마를 tranquilpeak로 변경하기 위해 blog 폴더 안의 _config.yml 파일의<br><figure class="highlight yaml"><figcaption><span>blog/_config.yml(before)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">theme:</span> <span class="string">landscape</span></div></pre></td></tr></table></figure></p><p>위 내용을 찾아서<br><figure class="highlight yaml"><figcaption><span>blog/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">theme:</span> <span class="string">tranquilpeak</span></div></pre></td></tr></table></figure></p><p>으로 변경한다.</p><h4 id="검색-설정"><a href="#검색-설정" class="headerlink" title="검색 설정"></a>검색 설정</h4><p>blog/themes/tranquilpeak/_config.yml 파일의 search: 부분을 변경한다.<br><figure class="highlight yaml"><figcaption><span>blog/themes/tranquilpeak/_config.yml(before)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">    title:</span> <span class="string">global.search</span></div><div class="line"><span class="attr">    url:</span> <span class="string">/#search</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">search</span></div><div class="line">    <span class="comment"># `open-algolia-search` classes are used to open algolia search modal</span></div><div class="line"><span class="attr">    class:</span> <span class="string">open-algolia-search</span></div></pre></td></tr></table></figure></p><p>위 내용을 찾아서<br><figure class="highlight yaml"><figcaption><span>blog/themes/tranquilpeak/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">    title:</span> <span class="string">global.search</span></div><div class="line"><span class="attr">    url:</span> <span class="string">/search</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">search</span></div></pre></td></tr></table></figure></p><p>으로 변경한다.</p><p>검색 모듈 사용을 위해 blog/_config.yml 파일의 맨 아래에 다음 3줄을 추가한다.<br><figure class="highlight yaml"><figcaption><span>blog/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">    path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">    field:</span> <span class="string">post</span></div></pre></td></tr></table></figure></p><p>검색창 레이아웃이 될 파일을 생성하자.<br>blog/themes/tranquilpeak/layout 폴더에 search.ejs 파일을 새로 만들고 아래 내용을 복사+붙여넣기 한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;site_search&quot; class=&quot;main-content-wrap&quot;&gt;</div><div class="line">  &lt;input type=&quot;text&quot; id=&quot;local-search-input&quot; name=&quot;q&quot; results=&quot;0&quot; placeholder=&quot;search...&quot; </div><div class="line">  class=&quot;form-control input--xlarge&quot; autofocus=&quot;autofocus&quot;/&gt;</div><div class="line">  &lt;div id=&quot;local-search-result&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p><p>다음은 검색 기능을 수행할 javascript 함수 작성이다.<br>blog/themes/tranquilpeak/source/assets/js 폴더에 search.js 파일을 새로 만들고 아래 내용을 복사+붙여넣기 한다.<br><figure class="highlight javascript"><figcaption><span>blog/themes/tranquilpeak/source/assets/js/search.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">path, search_id, content_id</span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: path,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">"xml"</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> xmlResponse </span>) </span>&#123;</div><div class="line">            <span class="comment">// get the contents from search data</span></div><div class="line">            <span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">title</span>: $( <span class="string">"title"</span>, <span class="keyword">this</span> ).text(),</div><div class="line">                    <span class="attr">content</span>: $(<span class="string">"content"</span>,<span class="keyword">this</span>).text(),</div><div class="line">                    <span class="attr">url</span>: $( <span class="string">"url"</span> , <span class="keyword">this</span>).text()</div><div class="line">                &#125;;</div><div class="line">            &#125;).get();</div><div class="line">            <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</div><div class="line">            <span class="keyword">if</span> (!$input) <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</div><div class="line">            $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> str=<span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;                </div><div class="line">                <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</div><div class="line">                $resultContent.innerHTML = <span class="string">""</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// perform local searching</span></div><div class="line">                <span class="keyword">var</span> numOfPostFound = <span class="number">0</span>; <span class="comment">// keeping track of # of result</span></div><div class="line">                datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">var</span> content_index = [];</div><div class="line">                    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_url = data.url;</div><div class="line">                    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</div><div class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></div><div class="line">                    <span class="keyword">if</span>(data_title != <span class="string">''</span> &amp;&amp; data_content != <span class="string">''</span>) &#123;</div><div class="line">                        keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword, i</span>) </span>&#123;</div><div class="line">                            index_title = data_title.indexOf(keyword);</div><div class="line">                            index_content = data_content.indexOf(keyword);</div><div class="line">                            <span class="keyword">if</span>( index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span> )&#123;</div><div class="line">                                isMatch = <span class="literal">false</span>;</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</div><div class="line">                                    index_content = <span class="number">0</span>;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                                    first_occur = index_content;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// show search results</span></div><div class="line">                    <span class="keyword">if</span> (isMatch) &#123;</div><div class="line">                        numOfPostFound += <span class="number">1</span>; <span class="comment">// keeping track of # of results</span></div><div class="line">                        str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title'&gt;"</span>+ data_title +<span class="string">"&lt;/a&gt;"</span>;</div><div class="line">                        <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</div><div class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// cut out 100 characters</span></div><div class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</div><div class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</div><div class="line">                            <span class="keyword">if</span>(start &lt; <span class="number">0</span>)&#123;</div><div class="line">                                start = <span class="number">0</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</div><div class="line">                                end = <span class="number">100</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(end &gt; content.length)&#123;</div><div class="line">                                end = content.length;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">var</span> match_content = content.substr(start, end); </div><div class="line">                            <span class="comment">// highlight all keywords</span></div><div class="line">                            keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword</span>)</span>&#123;</div><div class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</div><div class="line">                                match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span>+keyword+<span class="string">"&lt;/em&gt;"</span>);</div><div class="line">                            &#125;);</div><div class="line">                            </div><div class="line">                            str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content +<span class="string">"...&lt;/p&gt;"</span></div><div class="line">                        &#125;</div><div class="line">                        str += <span class="string">"&lt;/li&gt;"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                str += <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">                <span class="comment">// attaching a summary of searching result</span></div><div class="line">                <span class="keyword">if</span> (numOfPostFound &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (numOfPostFound &gt; <span class="number">1</span>) &#123;</div><div class="line">                        summary = numOfPostFound + <span class="string">" posts found"</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        summary = numOfPostFound + <span class="string">" post found"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    summary = <span class="string">"Nothing found"</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> summary = <span class="string">"&lt;p class=\"text-xlarge text-color-base archieve-result search-result-summary\"&gt;"</span> + summary + <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">                $resultContent.innerHTML = summary + str;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>위에서 작성한 함수를 tranquilpeak테마에 추가하자.<br>blog/themes/tranquilpeak/layout/_partial/script.ejs 파일을 열고 <code>&lt;!--SCRIPTS END--&gt;</code> 가 있는 라인을 찾아서 바로 <strong>윗줄</strong>에 다음 코드를 추가한다.<br><figure class="highlight javascript"><figcaption><span>blog/themes/tranquilpeak/layout/_partial/script.ejs </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;      </div><div class="line">     <span class="keyword">var</span> search_path = <span class="string">"&lt;%= config.search.path %&gt;"</span>;</div><div class="line">     <span class="keyword">if</span> (search_path.length == <span class="number">0</span>) &#123;</div><div class="line">     search_path = <span class="string">"search.xml"</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">var</span> path = <span class="string">"&lt;%= config.root %&gt;"</span> + search_path;</div><div class="line">     searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>다음은 검색창에 입힐 css파일을 만들자.<br>blog/themes/tranquilpeak/source/assets/css/ 폴더에 search.css 파일을 새로 만들고 아래 내용을 복사+붙여넣기 한다.<br><figure class="highlight"><figcaption><span>blog/themes/tranquilpeak/source/assets/css/search.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ul.search-result-list &#123;</div><div class="line">  padding-left: 10px;</div><div class="line">&#125;</div><div class="line">a.search-result-title &#123;</div><div class="line">  font-weight: bold;</div><div class="line">&#125;</div><div class="line">p.search-result &#123;</div><div class="line">  color=#555;</div><div class="line">  word-wrap: break-word;</div><div class="line">&#125;</div><div class="line">em.search-keyword &#123;</div><div class="line">  border-bottom: 1px dashed #4088b8;</div><div class="line">  font-weight: bold;</div><div class="line">  color: #ff0000;</div><div class="line">  font-style: normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>방금 생성한 css 파일을 검색 페이지에 적용하기 위해<br>blog/themes/tranquilpeak/layout/_partial/head.ejs 파일을 열고<br>파일의 맨 아랫줄<code>&lt;/head&gt;</code>의 바로 <strong>윗줄</strong>에 다음 내용을 추가한다.<br><figure class="highlight javascript"><figcaption><span>blog/themes/tranquilpeak/layout/_partial/head.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- css(<span class="string">'assets/css/search.css'</span>) %&gt;</div></pre></td></tr></table></figure></p><p>검색 적용은 끝~!</p><h4 id="검색페이지-확인"><a href="#검색페이지-확인" class="headerlink" title="검색페이지 확인"></a>검색페이지 확인</h4><p>확인을 위해 검색 페이지를 생성하고 서버를 구동해보자.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page <span class="string">"search"</span></div></pre></td></tr></table></figure></p><p>위 명령어를 실행하면 검색 페이지(blog/source/search/index.md)가 생성된다.<br>파일을 열어서 내용을 전부 삭제하고 아래 내용으로 복사+붙여넣기 한다.<br><strong>위에서 만든 search.ejs 파일을 검색 페이지의 레이아웃으로 지정하는 코드인<br><code>layout: &quot;search&quot;</code>가 필요하다.</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: "search"</div><div class="line">layout: "search"</div><div class="line"><span class="section">comment: false</span></div><div class="line">---</div></pre></td></tr></table></figure></p><h4 id="서버-구동"><a href="#서버-구동" class="headerlink" title="서버 구동"></a>서버 구동</h4><p>이제 hexo 서버를 실행해서 구동된 주소(기본값은 localhost:4000)로 접속 한 뒤,<br>search 메뉴를 클릭하면 검색 페이지를 확인할 수 있다.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;검색을-달자&quot;&gt;&lt;a href=&quot;#검색을-달자&quot; class=&quot;headerlink&quot; title=&quot;검색을 달자&quot;&gt;&lt;/a&gt;검색을 달자&lt;/h3&gt;&lt;p&gt;hexo 로 블로그를 새로 만들고,&lt;br&gt;이 사이트의 search 메뉴에 적용되어 있는 검색 기능을 설정하는 방법이다.&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="검색" scheme="http://yoursite.com/tags/%EA%B2%80%EC%83%89/"/>
    
      <category term="search" scheme="http://yoursite.com/tags/search/"/>
    
      <category term="hexo-generator-search" scheme="http://yoursite.com/tags/hexo-generator-search/"/>
    
  </entry>
  
  <entry>
    <title>influxDB history 에러 해결하기</title>
    <link href="http://yoursite.com/2016/09/05/influxdb-error-fix/"/>
    <id>http://yoursite.com/2016/09/05/influxdb-error-fix/</id>
    <published>2016-09-05T12:08:33.000Z</published>
    <updated>2017-05-07T11:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="에러"><a href="#에러" class="headerlink" title="에러"></a>에러</h2><p>Grafana에서 사용하려고 influxDB 를 Windows 7에서 빌드, 실행 했더니 influxDB shell에서 아래 에러가 발생하였다<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">There was an error writing <span class="built_in">history</span> file: open : The system cannot find the file specified.</div></pre></td></tr></table></figure></p><a id="more"></a><p>influxDB는 로그를 HOME 환경변수로 설정된 경로에 저장하는데,<br>HOME 환경변수가 설정되지 않으면 에러가 발생한다고 한다.<br><blockquote><p>The original issue this was opened for is actually fixed. The code no longer uses user.Current().<br>However it instead uses $HOME which now errors on windows, and on *nix when $HOME is unset.</p><footer><strong>github 답변</strong><cite><a href="https://github.com/influxdata/influxdb/issues/6070" target="_blank" rel="noopener">github.com/influxdata/influxdb/issues/6070</a></cite></footer></blockquote></p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>로그를 저장할 경로를 HOME 환경변수로 설정하면 된다<br>저장할 디렉토리 경로는 원하는 위치 아무데나-</p><h3 id="nix-시스템"><a href="#nix-시스템" class="headerlink" title="*nix 시스템"></a>*nix 시스템</h3><p>홈 디렉토리의 .bashrc나 .bash_profile 파일에 아래 명령어 추가<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HOME=로그_저장할_디렉토리_경로</div></pre></td></tr></table></figure></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>HOME 시스템 변수 설정(Java 설치할때 JAVA_HOME 시스템 변수 등록하는 과정과 동일)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;에러&quot;&gt;&lt;a href=&quot;#에러&quot; class=&quot;headerlink&quot; title=&quot;에러&quot;&gt;&lt;/a&gt;에러&lt;/h2&gt;&lt;p&gt;Grafana에서 사용하려고 influxDB 를 Windows 7에서 빌드, 실행 했더니 influxDB shell에서 아래 에러가 발생하였다&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;There was an error writing &lt;span class=&quot;built_in&quot;&gt;history&lt;/span&gt; file: open : The system cannot find the file specified.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="개발" scheme="http://yoursite.com/categories/%EA%B0%9C%EB%B0%9C/"/>
    
    
      <category term="influxDB" scheme="http://yoursite.com/tags/influxDB/"/>
    
      <category term="IT" scheme="http://yoursite.com/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>라이언 치즈케이크</title>
    <link href="http://yoursite.com/2016/07/21/make-ryan-cake/"/>
    <id>http://yoursite.com/2016/07/21/make-ryan-cake/</id>
    <published>2016-07-21T05:40:52.000Z</published>
    <updated>2017-05-07T11:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>제목에 만들기! 까지 썼다가 지웠다.. 레시피는 없다. 만들었던 기록만 남겨둔다.</p><h2 id="완성샷-부터"><a href="#완성샷-부터" class="headerlink" title="완성샷 부터!"></a>완성샷 부터!</h2><p><img src="https://lh3.googleusercontent.com/--SmRXmV138w/V5lr_1_s4dI/AAAAAAAAAyI/U249BJERBMsFWPN0UoHiVPC6y8RafyhhwCCo/s1080/IMG_5054.PNG" alt="라이언 치즈케이크"><br>몇대 맞고 온 거 같은 얼굴…<br>얼룩 안지게 하면 더 예쁠 것 같다.<br><a id="more"></a></p><h2 id="라이언"><a href="#라이언" class="headerlink" title="라이언!"></a>라이언!</h2><p>베이킹은 겨우 흉내만 내는 편이지만<br>그래도 직접 만들어 선물해 주면 기분이 좋다.</p><p>기념일을 맞아 무슨 케이크를 만들까 검색하다가<br>라이언 치즈케이크를 발견! 완전 꽂혀버렸다.</p><h3 id="recipe"><a href="#recipe" class="headerlink" title="recipe"></a>recipe</h3><p>라이언의 눈, 코를 그리기 위해 이 <a href="http://dalmiin.com/220673455466" target="_blank" rel="noopener">블로그 글</a>을 따라했다. 얼굴 도안도 여기서 다운받았다.<br>YouTube 에도 올라와 있다.<br><div class="video-container"><iframe src="//www.youtube.com/embed/YhWjEjH8HCE" frameborder="0" allowfullscreen></iframe></div></p><p>라이언 얼굴에 카라멜을 쓰거나 색소를 섞기도 하던데<br>나는 치즈케이크 색이 라이언 얼굴색이랑 비슷하게 나와서 둘 다 안썼다.</p><p>케이크를 만든 레시피는 <a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=38956048" target="_blank" rel="noopener">시오코나 홈베이킹 수업</a> 책의 치즈코이를 참고했다.<br><strong>과정샷 찍고 레시피 쓰고 보니 출처가 책이라 함부로 올릴 수 없게 되었다..</strong><br>(치즈케이크 레시피는 위에 블로그 참고하거나 구글 검색!)</p><h2 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h2><p><img src="https://lh3.googleusercontent.com/-0bWk1WxQyVY/V5TSO7bMzhI/AAAAAAAAAug/gulKDhmHnrQmjDDFFvVi3FyJdAnOpX5_ACCo/s1152/IMG_4988.jpg" alt="재료"><br>재료를 준비하고..</p><p><img src="https://lh3.googleusercontent.com/-jscH71moOec/V5TSOyPfcAI/AAAAAAAAAug/VjV94fZceOkUN2DfIUeWlSmBiYY5OkjqwCCo/s1152/IMG_4998.jpg" alt="MIX"><br>잘 섞고..</p><p><img src="https://lh3.googleusercontent.com/-gW9fRNLTyNI/V5TSO7j8hMI/AAAAAAAAAug/iNVhwUOyUyUrFqsdXwYDyQrlGIF5mqpUACCo/s1152/IMG_5006.jpg" alt="비스킷"><br>비스킷도 굽고..</p><p><img src="https://lh3.googleusercontent.com/-M_hd3Jfu4Ho/V5TSO6LSyRI/AAAAAAAAAug/eOyLFQJ1bWIQHkq-2hIs0iAZZGYQ-LqCwCCo/s1152/IMG_5019.jpg" alt="케이크굽기"><br>비스킷 깔고, 치즈 부어서 케이크도 굽고..</p><p><img src="https://lh3.googleusercontent.com/-3vYEVISViVw/V5TSO84PIpI/AAAAAAAAAug/31NwAJzbvVUDE1ZM4TM0uN8DHPGkacl_ACCo/s1152/IMG_5004.jpg" alt="얼굴"><br>초코펜으로 얼굴도 그리고..</p><p>귀는 머핀틀에 구운 치즈케이크로 만들었다.<br>얼굴에 귀 붙이고, 초콜렛 눈 코를 올리면</p><h3 id="끝"><a href="#끝" class="headerlink" title="끝!"></a>끝!</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;제목에 만들기! 까지 썼다가 지웠다.. 레시피는 없다. 만들었던 기록만 남겨둔다.&lt;/p&gt;
&lt;h2 id=&quot;완성샷-부터&quot;&gt;&lt;a href=&quot;#완성샷-부터&quot; class=&quot;headerlink&quot; title=&quot;완성샷 부터!&quot;&gt;&lt;/a&gt;완성샷 부터!&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/--SmRXmV138w/V5lr_1_s4dI/AAAAAAAAAyI/U249BJERBMsFWPN0UoHiVPC6y8RafyhhwCCo/s1080/IMG_5054.PNG&quot; alt=&quot;라이언 치즈케이크&quot;&gt;&lt;br&gt;몇대 맞고 온 거 같은 얼굴…&lt;br&gt;얼룩 안지게 하면 더 예쁠 것 같다.&lt;br&gt;
    
    </summary>
    
      <category term="요리" scheme="http://yoursite.com/categories/%EC%9A%94%EB%A6%AC/"/>
    
      <category term="베이킹" scheme="http://yoursite.com/categories/%EC%9A%94%EB%A6%AC/%EB%B2%A0%EC%9D%B4%ED%82%B9/"/>
    
    
      <category term="라이언" scheme="http://yoursite.com/tags/%EB%9D%BC%EC%9D%B4%EC%96%B8/"/>
    
      <category term="베이킹" scheme="http://yoursite.com/tags/%EB%B2%A0%EC%9D%B4%ED%82%B9/"/>
    
      <category term="치즈케이크" scheme="http://yoursite.com/tags/%EC%B9%98%EC%A6%88%EC%BC%80%EC%9D%B4%ED%81%AC/"/>
    
  </entry>
  
  <entry>
    <title>홍콩 - 보 이노베이션 (Bo Innovation)</title>
    <link href="http://yoursite.com/2016/07/11/HK-bo/"/>
    <id>http://yoursite.com/2016/07/11/HK-bo/</id>
    <published>2016-07-11T00:50:32.000Z</published>
    <updated>2017-05-07T11:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>홍콩을 다녀왔다. <strong>맛난거 먹으려고~</strong><br>홍콩의 첫 점심은 완차이에 있는 <a href="http://www.boinnovation.com/html/html_default.html" target="_blank" rel="noopener">보 이노베이션 (Bo Innovation)</a> 이었다.<br><iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3692.0456232114743!2d114.16883355144999!3d22.276261549322356!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3404005ce0907ea9%3A0x557c9fa04c689113!2sBo+Innovation!5e0!3m2!1sko!2s!4v1468246166676" width="100%" height="300" frameborder="0" allowfullscreen></iframe><br><a id="more"></a></p><p>보 이노베이션은 홍콩의 미슐랭 3스타 레스토랑 6곳 중 하나이고 (2016년 기준)<br>장르는 모던 중식이다.<br>한국의 <a href="http://www.hoteltheplaza.com/kor/dining/taoyuen_overview.jsp" target="_blank" rel="noopener">도원</a> 에서 갈라 디너를 하기도 했고,<br><a href="http://enter.jtbc.joins.com/cooka/" target="_blank" rel="noopener">쿡가대표</a>, <a href="http://program.lifestyler.co.kr/olive/onenightfoodtrip" target="_blank" rel="noopener">원나잇 푸드트립</a>같은 국내 TV프로에 출연한 적도 있다.</p><hr><p><img src="https://lh3.googleusercontent.com/-H5Yh1beJ-yw/V4ZeWVXaMwI/AAAAAAAAAq0/Ek-N6jaT4tgic993pg_ya-yMsVFx7rEQQCCo/s1152/bo_ganpan.jpg" alt="보이노베이션 입간판"><br>이메일로 2주전에 예약하고 방문하였다.<br>j senses 건물 2층에 있다.<br>런치 메뉴는 아래 2가지. 구성은 <a href="http://www.boinnovation.com/html/html_default.html" target="_blank" rel="noopener">홈페이지</a>에서 확인가능하다.</p><ul><li>Set Lunch Menu</li><li>Lunch Chef Menu</li></ul><p>Lunch Chef Menu 에서 메인을 하나씩 다르게 주문했다.</p><h3 id="메뉴"><a href="#메뉴" class="headerlink" title="메뉴"></a>메뉴</h3><p><img src="https://lh3.googleusercontent.com/--05O-n_MCdA/V4ZeWcaQYcI/AAAAAAAAAq0/U_8AhayWjQUkk8qFf-DvhUZRoUKs4UxTACCo/s1152/bo_menu.jpg" alt="보이노베이션 메뉴"><br>주문하면 메뉴가 써진 종이를 테이블에 놓아준다<br>전체 구성을 계속 확인할 수 있어서 좋았다</p><h4 id="Egg-Waffle"><a href="#Egg-Waffle" class="headerlink" title="Egg Waffle"></a>Egg Waffle</h4><p><img src="https://lh3.googleusercontent.com/-lojgPYmm-tU/V4ZeWch9a8I/AAAAAAAAAq0/fkF9Rdi_QZIznSYhdPtlGkZ4N72SRXu3gCCo/s1600/bo_0.jpg" alt="egg waffle"><br>식전빵 격인 계란와플<br>홍콩 길거리의 계란와플과 다른점은 속이 빈 공갈빵 스타일 이라는 것<br>약간의 재료가 들어서 바삭 짭짤한 맛이 난다</p><h4 id="SCALLOP"><a href="#SCALLOP" class="headerlink" title="SCALLOP"></a>SCALLOP</h4><p><img src="https://lh3.googleusercontent.com/-zzY3cZcUdZQ/V4ZeWdkKlyI/AAAAAAAAAq0/N49vw2az7w0bfsspv9rsegj3nNO8FtjhQCCo/s1600/bo_1.jpg" alt="scallop"><br>가리비와 누룽지(뻥튀기?), 그리고 식초 소스 (jolo)의 시큼함이 식욕을 돋운다</p><h4 id="UMAMI"><a href="#UMAMI" class="headerlink" title="UMAMI"></a>UMAMI</h4><p><img src="https://lh3.googleusercontent.com/-5DUCCvLAd50/V4ZeWejGRiI/AAAAAAAAAq0/DaeVe8aD4sc9BAqj4VmZxQDAZdc-qpuxwCCo/s1600/bo_2.jpg" alt="umami"><br>빨간 새우기름을 면에 뿌려 먹는다<br>새우도 면도 UMAMI(감칠맛)라는 이름에 걸맞는 맛</p><h4 id="MOLECULAR"><a href="#MOLECULAR" class="headerlink" title="MOLECULAR"></a>MOLECULAR</h4><p><img src="https://lh3.googleusercontent.com/-eMiP3u-xjnI/V4ZeWenUulI/AAAAAAAAAq0/ZUKhYtUPmmoQ-I8DOxWc2hqjSMTu2c6_QCCo/s1600/bo_3_2.jpg" alt="molecular"><br>보 이노베이션의 시그니쳐 메뉴인 액체 샤오롱바오<br>메뉴가 나올때마다 어떤 음식이고, 어떻게 먹는지 설명해 주는데 이건 한입에 넣고 먹기를 권하더라<br>입안에서 샤오롱바오가 퐁 터진다. 허무한 듯 신기한 맛</p><h4 id="FOIE-GRAS"><a href="#FOIE-GRAS" class="headerlink" title="FOIE GRAS"></a>FOIE GRAS</h4><p><img src="https://lh3.googleusercontent.com/-SXKUZ4u23wc/V4ZeWX_joLI/AAAAAAAAAq0/-96Sw97yx84L2iJ91EX55MO1uGeCpeVcgCCo/s1600/bo_4.jpg" alt="foie gras"><br>굉장히 부드러웠던 푸아그라.<br>푸아그라와 짭짤한 카라멜 아이스크림(겨자잎인 것 같다),<br>맛의 밸런스를 맛춰주는 green apple 소스.<br>어울림이 좋았다.</p><h4 id="MAO-TAI"><a href="#MAO-TAI" class="headerlink" title="MAO TAI"></a>MAO TAI</h4><p><img src="https://lh3.googleusercontent.com/-dX252Adn7JI/V4ZeWb1JgVI/AAAAAAAAAq0/Mi2QwBBEt0MlMNcIekzwi19x53Rlso74wCCo/s1600/bo_5.jpg" alt="mao tai"><br>중국 특산주 MAO TAI에 과일과 허브 등을 넣은 음료.<br>알콜은 거의 느껴지지 않았다. (모주 생각이 났다)<br>메인 먹기전에 이걸 마셔서 어쩌고저쩌고 했는데 못 알아들었다.</p><h4 id="WILD-BLACK-COD"><a href="#WILD-BLACK-COD" class="headerlink" title="WILD BLACK COD"></a>WILD BLACK COD</h4><p><img src="https://lh3.googleusercontent.com/-cMjhGESCMVw/V4ZeWcy9mOI/AAAAAAAAAq0/CT1qunpt1awDkJZhF74dK5Q5Tgb0Gy4OACCo/s1600/bo_6.jpg" alt="wild black cod"><br>대구와 콘소메<br>앞에 새우도 그렇고 대구도 살이 참 탱탱한게 맛있다.<br>콘소메는 그닥.</p><h4 id="LANGOUSTINE-amp-SAGA-GYU-BEEF"><a href="#LANGOUSTINE-amp-SAGA-GYU-BEEF" class="headerlink" title="LANGOUSTINE &amp; SAGA-GYU BEEF"></a>LANGOUSTINE &amp; SAGA-GYU BEEF</h4><p><img src="https://lh3.googleusercontent.com/-HfywE8ppaE4/V4ZeWa6XU8I/AAAAAAAAAq0/q3sgb-DDNg8ooc9A5uzceSkRGspscYZ3gCCo/s1600/bo_7_1.jpg" alt="langoustine"><br>드디어 메인요리<br>하나는 랑구스틴<br>메뉴에 참 많은 재료가 써있길래 다 들어있나 했더니… 오밀조밀 들어있다<br><img src="https://lh3.googleusercontent.com/--SBBcnSdlU0/V4ZeWTpPsdI/AAAAAAAAAq0/c2zkv-dRLroklUPce0Lukgf3ucjSclWsQCCo/s1600/bo_7_2.jpg" alt="saga-gyu beef"><br>메인 또 하나는 소고기<br>아래 깔린 떡볶이 떡 같은건 속재료 없는 창펀이다<br>쫄깃쫄깃하니 괜찮았다</p><h4 id="CARAMEL"><a href="#CARAMEL" class="headerlink" title="CARAMEL"></a>CARAMEL</h4><p><img src="https://lh3.googleusercontent.com/-PyxPMFDPHac/V4ZeWfesWcI/AAAAAAAAAq0/f5JHdRhHygA_pzGaQ7eBlWQEnm3Yp3s8ACCo/s1600/bo_8.jpg" alt="caramel"><br>디저트 아이스크림.<br>예약할때 기념일이라고 했더니 문구도 써주었다. 고마워라</p><p><img src="https://lh3.googleusercontent.com/-K98XIqEN2XE/V4ZeWWOvqrI/AAAAAAAAAq0/9UK6bpRwErQhkhdVyc8ipAfcgb5NhUb0QCCo/s1600/bo_tea.jpg" alt="tea"><br>마무리는 커피대신 전통차.<br>커피가 별로라는 글을 어디선가 본 것 같아 주문했다.<br>맛은 괜찮았지만,<br>굳이 추가금 내고 주문하길 권하진 않는다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>굿.<br>생소한 형태의 음식들도 있었지만 전체적으로 맛이 좋았고,<br>무엇보다 직원들의 서비스가 마음에 들었다.<br>매우 만족.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;홍콩을 다녀왔다. &lt;strong&gt;맛난거 먹으려고~&lt;/strong&gt;&lt;br&gt;홍콩의 첫 점심은 완차이에 있는 &lt;a href=&quot;http://www.boinnovation.com/html/html_default.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;보 이노베이션 (Bo Innovation)&lt;/a&gt; 이었다.&lt;br&gt;&lt;iframe src=&quot;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3692.0456232114743!2d114.16883355144999!3d22.276261549322356!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3404005ce0907ea9%3A0x557c9fa04c689113!2sBo+Innovation!5e0!3m2!1sko!2s!4v1468246166676&quot; width=&quot;100%&quot; height=&quot;300&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
      <category term="맛집" scheme="http://yoursite.com/categories/%EB%A7%9B%EC%A7%91/"/>
    
    
      <category term="맛집" scheme="http://yoursite.com/tags/%EB%A7%9B%EC%A7%91/"/>
    
      <category term="미슐랭" scheme="http://yoursite.com/tags/%EB%AF%B8%EC%8A%90%EB%9E%AD/"/>
    
      <category term="홍콩" scheme="http://yoursite.com/tags/%ED%99%8D%EC%BD%A9/"/>
    
  </entry>
  
  <entry>
    <title>사당 - 후우후라멘</title>
    <link href="http://yoursite.com/2016/06/29/gndngnfkaps/"/>
    <id>http://yoursite.com/2016/06/29/gndngnfkaps/</id>
    <published>2016-06-29T02:28:53.000Z</published>
    <updated>2017-05-07T11:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>첫 포스팅은 라멘~<br>평일 쉬는 날, 사당역 근처 후우후라멘을 방문하였다.<br>사당역 6번 출구로 나와서 조금 걸으면 된다.<br><a id="more"></a></p><p>위치는 요기<br><iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3037.354125785463!2d126.97694802284846!3d37.47636155350951!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x357ca04855e24bad%3A0xc75246d1da99b0b!2z64yA7ZWc66-86rWtIOyEnOyauO2KueuzhOyLnCDqtIDslYXqtawg64Ko67aA7Iic7ZmY66GcMjcy6ri4IDEw!5e0!3m2!1sko!2s!4v1467133830707" width="100%" height="300" frameborder="0" allowfullscreen></iframe><br>오픈은 11:00 ~ 21:00 (월, 화 휴무)<br>11시 15분쯤 방문했는데 이미 한팀이 와 있었고, 12시 되기 전에 테이블이 대부분 찼다.<br>다들 <em>아직 11시 아냐?</em> 라며 들어왔다… 찾는 사람이 많다.</p><p>메뉴는 이렇다<br><img src="https://lh3.googleusercontent.com/-YHjTP6Cyn84/V3KwndYfXBI/AAAAAAAAAoM/n0hWKUZ8BN0XZu0NAnIjW4vH57gNru7jQCCo/s1152/IMG_4748.jpg" alt="후우후라멘 메뉴"><br>이중 주문은</p><h3 id="돈코츠소유라멘정식-새우튀김2개"><a href="#돈코츠소유라멘정식-새우튀김2개" class="headerlink" title="돈코츠소유라멘정식 (새우튀김2개)"></a>돈코츠소유라멘정식 (새우튀김2개)</h3><p><img src="https://lh3.googleusercontent.com/-bLSTBCyajA0/V3KwnWoxhCI/AAAAAAAAAoM/fF3_C4xO_zQBfruNMF5kAjsQNPr-rfG9wCCo/s1600/IMG_4749.jpg" alt="후우후라멘 소유정식"><br>라멘뒤에 김치 있다.</p><p>새우튀김은 여느 일식집에서 먹을 수 있는 튀김이었고,<br>드레싱은 고소한… <del>그저 그랬다. 둘 다.</del></p><p>라멘은 매우 만족.<br>차슈가 두툼 하니 감자탕 고기 식감과 비슷하였고,<br>담백한 국물 맛이 좋았다.<br>참, 숟가락이 국자처럼 직각으로 구부러진 모양이라 먹기 좀 불편했다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;첫 포스팅은 라멘~&lt;br&gt;평일 쉬는 날, 사당역 근처 후우후라멘을 방문하였다.&lt;br&gt;사당역 6번 출구로 나와서 조금 걸으면 된다.&lt;br&gt;
    
    </summary>
    
      <category term="맛집" scheme="http://yoursite.com/categories/%EB%A7%9B%EC%A7%91/"/>
    
    
      <category term="맛집" scheme="http://yoursite.com/tags/%EB%A7%9B%EC%A7%91/"/>
    
      <category term="라멘" scheme="http://yoursite.com/tags/%EB%9D%BC%EB%A9%98/"/>
    
      <category term="사당" scheme="http://yoursite.com/tags/%EC%82%AC%EB%8B%B9/"/>
    
  </entry>
  
  <entry>
    <title>first</title>
    <link href="http://yoursite.com/2016/06/28/first/"/>
    <id>http://yoursite.com/2016/06/28/first/</id>
    <published>2016-06-27T22:07:07.000Z</published>
    <updated>2017-05-07T11:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Everything you can imagine is real</p><footer><strong>Pablo Ruiz Picasso</strong></footer></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Everything you can imagine is real&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Pablo Ruiz Picasso&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="welcome" scheme="http://yoursite.com/tags/welcome/"/>
    
  </entry>
  
</feed>
